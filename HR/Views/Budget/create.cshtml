@model HR.Models.ViewModel.budgetVM
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
  //  Layout = "~/Views/Shared/View.cshtml";
}
@using HR.Resource;
<div class="panel panel-primary" data-collapsed="0">
            <div class="panel-body">
                @using (Html.BeginForm("Create", "Budget", FormMethod.Post, new { id = "dd", enctype = "multipart/form-data" }))
                {
                    <div class="sec-nav">
                        <div><i class="far fa-save"></i><button type="submit" class="create-btn">@organ.create </button></div>
                        <div><i class="fas fa-plus"></i><a href="@Url.Action("create", "Budget")" class="create-btn">@pers_2.new_</a></div>
                        <div><i class="far fa-trash-alt"></i><input type="button" href="@Url.Action("index","Budget")" class="create-btn" value=@organ.delete /></div>
                        <div><i class="fas fa-undo"></i><a style="" href="@Url.Action("index", "Budget")" class="create-btn"> @pers_2.Back</a></div>



                    </div>
                    @Html.AntiForgeryToken()
                    <input name="item" value="" hidden />
                    <input name="AmountN" value="" hidden />
                    <input name="AmountF" value="" hidden />
                    <input name="commentt" value="" hidden />
                   
                    <div class="form-horizontal">
                        <hr />
                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                           
                            <div class="col-md-4">
                                <label style="color:red">
                                    @organ.code
                                </label>
                                @Html.EditorFor(model => model.Budget.Code, new { htmlAttributes = new {@readonly=true, @class = "form-control", id = "code" } })
                                @Html.ValidationMessageFor(model => model.Budget.Code, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-4">
                                <label style="color:red">
                                    <span> @organ.fromyear </span>
                                </label>
                                @Html.EditorFor(model => model.Budget.Year_From, new { htmlAttributes = new { @class = "form-control", id = "YF", type = "number", @min = "1990" } })
                                @Html.ValidationMessageFor(model => model.Budget.Year_From, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-4">
                                <label> @organ.toyear </label>
                                @Html.EditorFor(model => model.Budget.Year_To, new { htmlAttributes = new { @class = "form-control", id = "YT", type = "number", @min = "1990" } })
                                @Html.ValidationMessageFor(model => model.Budget.Year_To, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                <label>
                                    <span> @organ.budgettype</span>
                                </label>
                                @Html.EnumDropDownListFor(m => m.Budget.budget_type, "Select budget type", new { @class = "select2" })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-4">
                                <label style="color:red">
                                    <span> @organ.organizationchart</span>
                                </label>
                                @Html.DropDownListFor(m => m.Budget.Organization_unitid, new SelectList(ViewBag.organization, "ID", "Code"), organ.organizationchart, new { @class = "select2", @onchange = "org()", @id = "orgid" })
                                @Html.ValidationMessageFor(model => model.Budget.Organization_unitid, "", new { @class = "text-danger" })
                                <input type="hidden" value="" class="form-control" id="orgname" disabled />
                            </div>
                        </div>
                      
                       
                       
                        

                        <div class="form-group">
                         
                            <div class="col-md-4">
                                <label>
                                    <span> @organ.nativcurrency</span>
                                </label>
                                @Html.DropDownListFor(m => m.Budget.sign_native, new SelectList(ViewBag.sign, "ID", "Code"), organ.currency, new { @class = "select2", @onchange = "curN('N')", @id = "curNid" })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })
                                <input type="hidden" value="" class="form-control" id="curNname" disabled />
                            </div>
                          
                            <div class="col-md-4">
                                <label>
                                    <span>@organ.Forigncurrency</span>
                                </label>
                                @Html.DropDownListFor(m => m.Budget.sign_forign, new SelectList(ViewBag.sign, "ID", "Code"), organ.currency, new { @class = "select2", @onchange = "curF('F')", @id = "curFid" })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })
                                <input type="hidden" value="" class="form-control" id="curFname" disabled />
                            </div>
                           
                            
                        </div>
                       
                        
                        <div class="form-group">
                            <div class="col-md-4">
                                <label>
                                    <span>
                                        @organ.Currencyrate
                                    </span>
                                </label>
                                @Html.EditorFor(model => model.Budget.Currency_rate, new { htmlAttributes = new { @class = "form-control", id = "R", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                <label>
                                    <span id="ANN">@organ.amountnative</span>
                                </label>
                                @Html.EditorFor(model => model.Budget.amount_native, new { htmlAttributes = new { @class = "form-control", id = "N", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.amount_native, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-4">
                                <label>
                                    <span id="AFF"> @organ.ammountforigne</span>
                                </label>
                                @Html.EditorFor(model => model.Budget.ammount_forigne, new { htmlAttributes = new { @class = "form-control", id = "F", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.ammount_forigne, "", new { @class = "text-danger" })
                            </div>
                              <div class="col-md-4">
                                  <label>
                                      <span> @organ.Remainingnative</span>
                                  </label>
                                @Html.EditorFor(model => model.Budget.Remaining_native, new { htmlAttributes = new { @Readonly = true, @class = "form-control", id = "RN", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.Remaining_native, "", new { @class = "text-danger" })

                            </div>
                            
                            <div class="col-md-4">
                                <label>
                                    <span>@organ.remainingforigne</span>
                                </label>   
                                @Html.EditorFor(model => model.Budget.Remaining_forgin, new { htmlAttributes = new { @Readonly = true, @class = "form-control", id = "RF", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.Remaining_forgin, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-12">
                            <ul class="nav nav-tabs bordered">
                                <!-- available classes "bordered", "right-aligned" -->
                                <li class="active">
                                    <a href="#Budgetdetails" data-toggle="tab">
                                        <span class="visible-xs"><i class="entypo-home"></i></span>
                                        <span class="hidden-xs">@organ.budgetdetails</span>
                                    </a>
                                </li>
                                <li>
                                    <a href="#BudgetStatus" data-toggle="tab">
                                        <span class="visible-xs"><i class="entypo-user"></i></span>
                                        <span class="hidden-xs">@organ.budgetstatus</span>
                                    </a>
                                </li>
                                <li>
                                    <a href="#Justification" data-toggle="tab">
                                        <span class="visible-xs"><i class="entypo-user"></i></span>
                                        <span class="hidden-xs">@organ.justification</span>
                                    </a>
                                </li>
                            </ul>
                            <div class="tab-content">
                                        <div class="tab-pane active" id="Budgetdetails" style="overflow: hidden;width: auto;height: auto;">

                                        <div class="form-group">
                                            <label class="control-label col-md-2">
                                                <span> @organ.budgetitem </span>
                                            </label>
                                            <div class="col-md-4">
                                                @Html.DropDownList("items", new SelectList(ViewBag.items, "ID", "Code"), organ.item, new { @class = "select2", @id = "ite" })
                                            </div>
                                            <div class="col-md-2"></div>
                                             <div class="control-label col-md-4">
                                                <a  onclick="additems()" style="margin-right:3px" class="btn btn-success" > @organ.ADDnewbudgetitem </a>
                                                 <a onclick="Reaset()" class="btn btn-success"> @organ.clearall </a>
                                            </div>
                                           
                                            
                                        </div>
                                            <hr />
                                            <hr />
                                             <div id="itemsdiv">

                                            </div>
                                        </div>
                                       <div class="tab-pane" id="BudgetStatus">
                                           <div class="form-group">
                                               <div class="col-md-4">
                                                   <label>
                                                       <span>@organ.status</span>
                                                   </label>
                                                   @Html.EnumDropDownListFor(m => m.status.statu, new { @readonly = true, @class = "select2" })
                                                   @Html.ValidationMessageFor(model => model.status.statu, "", new { @class = "text-danger" })

                                               </div>
                                           </div>
                                           <div class="form-group">
                                             
                                              
                                               <div class="col-md-4">
                                                   <label>
                                                       <span> @organ.createdby</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.created_by, new { htmlAttributes = new {  @class = "form-control" } })
                                                   @Html.ValidationMessageFor(model => model.status.created_by, "", new { @class = "text-danger" })

                                               </div>
                                               <div class="col-md-4">
                                                   <label>
                                                       <span>@organ.Reportasreadyby</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.return_to_reviewby, new { htmlAttributes = new { @class = "form-control" } })
                                                   @Html.ValidationMessageFor(model => model.status.return_to_reviewby, "", new { @class = "text-danger" })

                                               </div>
                                               <div class="col-md-4">
                                                   <label>
                                                       <span>@organ.approvedby</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.approved_by, new { htmlAttributes = new { @class = "form-control" } })
                                                   @Html.ValidationMessageFor(model => model.status.approved_by, "", new { @class = "text-danger" })

                                               </div>
                                               <div class="col-md-4">
                                                   <label>
                                                       <span> @organ.Rejectedby</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.Rejected_by, new { htmlAttributes = new { @class = "form-control" } })
                                                   @Html.ValidationMessageFor(model => model.status.Rejected_by, "", new { @class = "text-danger" })

                                               </div>
                                               <div class="col-md-4">
                                                   <label>
                                                       <span>@organ.cancaledby</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.cancaled_by, new { htmlAttributes = new { @class = "form-control" } })
                                                   @Html.ValidationMessageFor(model => model.status.cancaled_by, "", new { @class = "text-danger" })

                                               </div>

                                               
                                           </div>


                                           <div class="form-group">
                                             
                                               <div class="col-md-4">
                                                   <label>
                                                       <span> @organ.createdDate</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.created_bydate, new { htmlAttributes = new { @class = "form-control", @type = "date", id = "CR" } })
                                                   @Html.ValidationMessageFor(model => model.status.created_bydate, "", new { @class = "text-danger" })

                                               </div>



                                               <div class="col-md-4">
                                                   <label>
                                                       <span>@organ.ReportasreadyDate</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.return_to_reviewdate, new { htmlAttributes = new { @class = "form-control", @type = "date", id = "RE" } })
                                                   @Html.ValidationMessageFor(model => model.status.return_to_reviewdate, "", new { @class = "text-danger" })

                                               </div>

                                            
                                               <div class="col-md-4">
                                                   <label>
                                                       <span> @organ.approvedDate</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.approved_bydate, new { htmlAttributes = new { @class = "form-control", @type = "date", id = "AP" } })
                                                   @Html.ValidationMessageFor(model => model.status.approved_bydate, "", new { @class = "text-danger" })

                                               </div>

                                         
                                             
                                               
                                           
                                               <div class="col-md-4">
                                                   <label>
                                                       <span>@organ.RejectedDate</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.Rejected_bydate, new { htmlAttributes = new { @class = "form-control", @type = "date", id = "Rj" } })
                                                   @Html.ValidationMessageFor(model => model.status.Rejected_bydate, "", new { @class = "text-danger" })

                                               </div>
                                               
                                               <div class="col-md-4">
                                                   <label>
                                                       <span>@organ.cancaledDate</span>
                                                   </label>
                                                   @Html.EditorFor(model => model.status.cancaled_bydate, new { htmlAttributes = new { @class = "form-control", @type = "date", id = "CA" } })
                                                   @Html.ValidationMessageFor(model => model.status.cancaled_bydate, "", new { @class = "text-danger" })

                                               </div>
                                           </div>
                                        </div>
                                        <div class="tab-pane" id="Justification">
                                            @Html.TextAreaFor(m => m.justification.justifiaction,7,400,new { });
                                            @Html.ValidationMessageFor(model => model.justification.justifiaction, "", new { @class = "text-danger" })
                                       </div>  

                                    </div>
                             

                           
                        </div>
                    </div>
                }
            </div>
        </div>
@section scripts{}
<script>
    $(function () { 
        GetDataById2('@Model.status.created_bydate', "CR");
        GetDataById2('@Model.status.Rejected_bydate', "Rj");
        GetDataById2('@Model.status.return_to_reviewdate', "RE");
        GetDataById2('@Model.status.approved_bydate', "AP");
        GetDataById2('@Model.status.cancaled_bydate', "CA");
    });

    function GetDataById2(date, id) {
        debugger
        var valx = new Date(date);
        var month;
        if ((valx.getMonth() + 1) < 10) {
            month = "0" + (valx.getMonth() + 1).toString();
        }
        else {
            month = date.getMonth() + 1;
        }
        var day = parseInt(valx.getDate());
        if (day < 10) {
            day = "0" + (valx.getDate()).toString();
        }
        else {
            day = valx.getDate();
        }
        var d = valx.getFullYear() + '-' + month + '-' + day;
        $('#' + id).val(d);
    }
    function org()
    {
         
        var id = $("#orgid").val();
        $.ajax({
            type: "post",
            url: "/Budget/getorg",
            data: { "id": id },
            success: function (result) {
                 
                $("#orgname").val(result.unit_Description);
               
    
            }
        });
    }
    function curN(I) {
         
        var id = $("#curNid").val();
        $.ajax({
            type: "post",
            url: "/Budget/getcurrency",
            data: { "id": id },
            success: function (result) {
                 
                $("#curNname").val(result.Name + "__" + result.symbol);
                if (I == 'N')
                {
                    document.getElementById("ANN").innerHTML = ('@HR.Resource.organ.amount'+'_'+ result.symbol);
                }
                if (I == 'F')
                {
                    document.getElementById("AFF").innerHTML = ('@HR.Resource.organ.amount' + '_' + result.symbol);
                }
            }
        });
    }
    function curF(I) {
         
        var id = $("#curFid").val();
        $.ajax({
            type: "post",
            url: "/Budget/getcurrency",
            data: { "id": id },
            success: function (result) {
                 
                $("#curFname").val(result.Name+"__"+ result.symbol);
                if (I == 'N') {
                    document.getElementById("ANN").innerHTML = ('@HR.Resource.organ.amount' + '_' + result.symbol);
                }
                if (I == 'F') {
                    document.getElementById("AFF").innerHTML = ('@HR.Resource.organ.amount' + '_' + result.symbol);
                }
            }
        });
    }
    $("#F").keyup(function (e) {
         
        var N = $("#N").val();
        var F = $("#F").val();
        var R = $("#R").val();


        if (R == 0 && R =="") {
            var R = parseFloat(F / N);
            $("#R").val(R);
        }
        if (N == 0 && N == "") {
            var N = parseFloat(F / R);
            $("#N").val(N);
            $("#RN").val(N);
        }
        else
        {
            //var R = parseInt(F / N);
            //$("#R").val(R);
            var N = parseFloat(F / R);
            $("#N").val(N);
            $("#RN").val(N);
        }
        $("#RF").val(F);
        var Nn = parseFloat($("#F").val());
        var rr = parseFloat($("#R").val());
        var all_value = document.getElementsByName("AmountF");
        var u = 0;
        $.each(all_value, function (key, value) {
             
            var op = value.value;
            if (op != "" && op != "0") {
                u = parseFloat(u) + parseFloat(op)
            }
        });
        $("#RF").val(Nn - u);
        $("#RN").val((Nn - u) / rr);

    });
    $("#N").keyup(function (e) {
         
        event.stopPropagation();
        var N = $("#N").val();
        var F = $("#F").val();
        var R = $("#R").val();

       
       
            if (R == 0 && R == "") {
                var R = parseFloat(F / N);
                $("#R").val(R);
            }
            if (F == 0 || F == "") {
                var F = parseFloat(N * R);
                $("#F").val(F);
                $("#RF").val(F);
            }
            else {
                //var R = parseInt(F / N);
                //$("#R").val(R);
                var F = parseFloat(N * R);
                $("#F").val(F);
                $("#RF").val(F);
            }




            $("#RN").val(N);


            var Nn = parseFloat($("#N").val());
            var rr = parseFloat($("#R").val());
            var all_value = document.getElementsByName("AmountN");
            var u = 0;
            $.each(all_value, function (key, value) {
                 
                var op = value.value;
                if (op != "" && op != "0") {
                    u = parseFloat(u) + parseFloat(op)
                }
            });
            $("#RN").val(Nn - u);
            $("#RF").val((Nn - u) * rr);
       
    });
    $("#R").keyup(function (e) {
         
        var N = $("#N").val();
        var F = $("#F").val()
        var R = $("#R").val();


        
        var all_value = document.getElementsByName("AmountN");
        var u = 0;
        $.each(all_value, function (key, value) {
             
            var op = value.value;
            if (op != "" && op != "0") {
                u = parseFloat(u) + parseFloat(op)
            }
        });
       


        if ((F == "0" || F == "") && (N == "0" || N == ""))
        {

        }
        else if ((F == "0" || F == "") && (N != "0" || N != ""))
        { 
            var F = parseFloat(N * R); 
            $("#F").val(F);
            $("#RF").val(F);
            $("#RN").val(N);
        }
       else if ((N == "0" || N == "")&&(F!="0"||F!=""))
        {
            var N = parseFloat(F / R);
            $("#N").val(N);
            $("#RF").val(F);
            $("#RN").val(N);
        }
       else if ((F != "0" || F != "") && (N != "0" || N != ""))
        {
            var F = parseFloat(N * R);
            $("#F").val(F);
            $("#RF").val(F);
           
       }


       

    });
    $("#YF").keyup(function (e) {
        var value = $("#YF").val();
        $("#YT").val(parseInt(parseInt(value) + parseInt(1)));
    });
    $("#YT").keyup(function (e) {
        var value = $("#YT").val();
        $("#YF").val(parseInt(parseInt(value) - parseInt(1)));
    });
</script>
<style>
    input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
</style>


<script>
    function additems()
    {
        $("#R").attr("Readonly", true);
        var ch = check();
        if (ch == 0)
        {

            var n = $("#N").val();
            var f = $("#F").val();

            if (n == 0 || n == "" || f == 0 || f == "") {
                alert('you must enter amount native and amount forign at first ');
            }
            else {
                var i = "";
                var d = $("#ite").val();
                var firstdrop = " ";
                $.ajax
                  ({
                      type: "post",
                      url: "/Budget/items",
                      data: { "id": d },
                      success: function (result) {

                          var i = "<div><div class='form-group'>" +
                                                    "<div class='col-md-4'>" +
                                                      "<label>" +
                                                       "<span>@organ.item </span>" +
                                                    "</label>" +

                                                          "<input type='text' value='" + result.Name + "' class='form-control' id='itemnamee' disabled />" +
                                                          "<input type='text'  name='item' value='" + result.ID + "' id='itemid' hidden />" +

                                                      "</div>" +

                                                    "<div class='col-md-4'>" +
                                                      "<label>" +
                                                          "<div>@organ.native</div>" +
                                                      "</label>" +
                                                           "<input type='number' min='0' value='0'  class='form-control' id='amountNn' onkeyup='calN($(this),$(this).parent().next().next().children())' name='AmountN' />" +
                                                            "<input type='number'   value='0'  hidden />" +
                                                    "</div>" +
                                                    "<div class='col-md-4'>" +
                                                      "<label>" +
                                                        "<div>@organ.forign</div>" +
                                                    "</label>" +
                                                           "<input type='number'  value='0' min='0' class='form-control' id='amountFf' readonly  onkeyup='calf($(this))' name='AmountF' />" +
                                                    "</div>" +

                                                      "<div class='col-md-4'>" +
                                                         "<label>" +
                                                       "<div>@organ.comment</div>" +
                                                    "</label>" +
                                                          "<input type='text' class='form-control' id='comment' name='commentt' />"
                                                          +
                                                      "</div>" +
                                                  "</div><div class='form-group'>" +
                                                  "<div class='col-md-12' style='text-align:center'>" +
                                                           "<input type='button' value=@organ.remove class='remove btn btn-danger' onclick='remove($(this),$(this).parent().parent().prev().children())' />" +

                                                   "</div></div> <hr/></div>";

                          $("#itemsdiv").append(i);
                          $("#ite").select2("val", "Select items");
                      }
                  });


            }
            var inp = document.getElementsByName('AmountN');
            $.each(inp, function (key, value) {

                value.addEventListener('select', function () {
                    this.selectionStart = this.selectionEnd;
                }, false);
            });
        }
    }
    function remove(thi,l) {

        thi.parent().parent().parent().remove();
        var inputN = l.children()[4];
        var inputF = l.children()[6];
        var v1 = parseFloat(inputN.value);
        var v2 = parseFloat(inputF.value);
        var RN = parseFloat($("#RN").val());
        var RF = parseFloat($("#RF").val());
        $("#RN").val(v1 + RN);
        $("#RF").val(v2 + RF);
    }
    function calN(th,h)
    {
        debugger
        var old = parseFloat(th.next().val());
        var thh = parseFloat(th.val());
        var R = parseFloat($("#R").val());
        var test = (parseFloat(h.val()) / R);
        if (thh < 0)
        {
            th.val(0)
        }
        if (thh != 0 && thh > 0)
        {
            var N = parseFloat($("#N").val());
            var F = parseFloat($("#F").val());
            var RN2 = parseFloat($("#RN").val());
            $("#RN").val(RN2 + old);
            var RN = parseFloat($("#RN").val());
            var RfF = parseFloat($("#RF").val());

            var R = parseFloat($("#R").val());
            var oi = th.val();
            if (thh > RN) {
                var u = 0;
                alert("Summation of amounts in all items greater than Available value ");

                th.next().val(0);
                th.val("");
                h.val("");
                var jj = document.getElementsByName("AmountN");
                $.each(jj, function (key, value) {

                    var op = value.value;
                    if (op != "" && op != "0") {
                        u = parseFloat(u) + parseFloat(op)
                    }

                });
                $("#RN").val(N - u);

                $("#RF").val(F - (u * R));
            }
            else if (oi == 0 || oi == "") {

                var t = parseFloat(h.val()) + RfF;
                if (h.val() == "0") {

                }
                else {
                    var tt = (parseFloat(h.val()) + RfF) / R;
                    $("#RF").val(t);
                    $("#RN").val(tt);
                    th.next().val(parseFloat(th.val()));
                    h.val("");
                }
            }
            else {
                $("#RN").val(RN - parseFloat(thh));
                var oo = parseFloat($("#RN").val());
                th.next().val(parseFloat(th.val()));
                h.val(thh * R);
                $("#RF").val(oo * R);
            }

        }
        else
        {
            var RN = parseFloat($("#RN").val());
            $("#RN").val(RN+old);
            var RfF = parseFloat($("#RF").val());
            $("#RF").val(RfF + (old * R));
            th.next().val(0);
            h.val(0);
        }
    }
    function calF(th)
    {

        var thh = parseFloat(th.val());
        var N = parseFloat($("#N").val());
        var F = parseFloat($("#F").val());
        var RN = parseFloat($("#RN").val());
        var RF = parseFloat($("#RF").val());
        var R = parseFloat($("#R").val());
        if (thh > RF)
        {
            alert("Summation of amounts in all items greater than Available value ");
            th.val("");
        }
        else
        {

            $("#RF").val(F - parseFloat(thh));
            var oo = parseFloat($("#RF").val());
            $("#RN").val(oo * R);

        }
    }
    function check()
    {
        ////////////

        var all_value = document.getElementsByName("AmountN");
        var u = 0;
        var Nn = parseFloat($("#N").val());
        $.each(all_value, function (key, value) {

            var op = value.value;
            if (op != "" && op != "0") {
                u = parseFloat(u) + parseFloat(op)
            }
        });
        if (u > Nn && u != 0) {
            alert("this value small than summation on budget items");
            var R=parseFloat($("#R").val());
            $("#F").val(R*u);
            $("#N").val(u);
            $("#RN").val(0);
            $("#RF").val(0);
            return 1;
        }
        else
            return 0;
        ////////////////
    }
    function ch()
    {

        var t = check();
        if (t == 0) {


            $("#dd").submit();
        }

    }
    function Reaset()
    {
         ;
        $("#R").val("0");
        $("#N").val("0");
        $("#F").val("0");
        $("#RN").val("0");
        $("#RF").val("0");
        $("#itemsdiv").empty();
        $("#R").attr("Readonly", false);
    }
    var n=parseFloat($("#N").val());
    var f=parseFloat($("#F").val());
    $("#RN").val(n);
    $("#RF").val(f);
</script>


<style>
    /*Create Page*/


    .sec-nav {
        z-index: 9999;
        position: fixed;
        top: 47px;
        background: #faf9f8;
        border-bottom: 1px solid #bebbb8;
        display: block;
        width: 100%;
        left: 50px;
        padding-left: 10px;
        height: 60px;
        line-height: 60px;
    }

        .sec-nav div {
            display: inline-block;
            padding: 5px 8px;
            width: unset;
            border: 0;
            color: #000;
            font-size: 16px;
            height: 60px;
        }

            .sec-nav div:hover {
                background: #eee;
                color: #000;
            }

                .sec-nav div:hover input {
                    color: #000;
                }

    .create-btn {
        border: 0;
        height: 100%;
        background-color: transparent;
    }

    .sec-nav div svg {
        color: #2266e3;
        font-size: 17px;
    }

    .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {
        /*float: unset*/
    }

    label {
        text-align: left;
        font: normal normal 400 12px/18px 'Segoe UI',tahoma,sans-serif;
        color: #605e5c;
        display: block;
        margin-bottom: 0;
        max-width: 220px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight: 600;
        margin-top: 15px;
    }

    .form-horizontal .form-group {
        margin: 0 !important;
    }

    input {
        height: 35px;
        color: #000;
    }

        input:active {
            border: 1px solid #2266e3;
        }

    .form-group .row > div {
        margin-bottom: 10px;
    }

    .content-wrapper {
        margin-left: 15px;
    }

    .col-md-4 {
        width: 20% !important;
    }
</style>