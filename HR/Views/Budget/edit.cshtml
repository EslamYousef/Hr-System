@model HR.Models.ViewModel.budgetVM
@{
    ViewBag.Title = "edit";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}
@using HR.Resource;
<div class="panel panel-primary" data-collapsed="0">
    <div class="panel-body">
        @using (Html.BeginForm("edit", "Budget", FormMethod.Post, new { id = "dd", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <input name="item" value="" hidden />
                    <input name="AmountN" value="" hidden />
                    <input name="AmountF" value="" hidden />
                    <input name="commentt" value="" hidden />
                    @Html.HiddenFor(m => m.Budget.ID);
                    @Html.HiddenFor(m => m.justification.ID);
                    @Html.HiddenFor(m => m.status.ID);
            if (Model.Budget.Budget_detailsID != null)
            {
                for (var i = 0; i < Model.Budget.Budget_detailsID.Count(); i++)
                {
                @Html.HiddenFor(m => m.Budget.Budget_detailsID[i]);
                @Html.HiddenFor(m => m.Budget.Budget_details[i]);
                }
            }


                    <div class="form-horizontal">
                        <hr />
                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span> @organ.code </span>
                            </label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Budget.Code, new { htmlAttributes = new { @readonly = true, @class = "form-control", id = "code" } })
                                @Html.ValidationMessageFor(model => model.Budget.Code, "", new { @class = "text-danger" })

                            </div>

                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span> @organ.fromyear </span>
                            </label>
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.Budget.Year_From, new { htmlAttributes = new { @class = "form-control", id = "YF", type = "number", @min = "1990" } })
                                @Html.ValidationMessageFor(model => model.Budget.Year_From, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.Budget.Year_To, new { htmlAttributes = new { @class = "form-control", id = "YT", type = "number", @min = "1990" } })
                                @Html.ValidationMessageFor(model => model.Budget.Year_To, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span> @organ.budgettype </span>
                            </label>
                            <div class="col-md-4">
                                @Html.EnumDropDownListFor(m => m.Budget.budget_type, "Select budget type", new { @class = "select2" })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })

                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span> @organ.Organizationunit </span>
                            </label>
                            <div class="col-md-4">
                                @Html.DropDownListFor(m => m.Budget.Organization_unitid, new SelectList(ViewBag.organization, "ID", "Code"), organ.organizationchart, new { @class = "select2", @onchange = "org()", @id = "orgid" })
                                @Html.ValidationMessageFor(model => model.Budget.Organization_unitid, "", new { @class = "text-danger" })
                                <input type="text" value="" class="form-control" id="orgname" disabled />
                            </div>
                        </div>


                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span> @organ.nativcurrency </span>
                            </label>
                            <div class="col-md-4">
                                @Html.DropDownListFor(m => m.Budget.sign_native, new SelectList(ViewBag.sign, "ID", "Code"), organ.currency, new { @class = "select2", @onchange = "curN('N')", @id = "curNid" })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })
                                <input type="text" value="" class="form-control" id="curNname" disabled />
                            </div>
                            <label class="control-label col-md-2">
                                <span> @organ.Forigncurrency </span>
                            </label>
                            <div class="col-md-4">
                                @Html.DropDownListFor(m => m.Budget.sign_forign, new SelectList(ViewBag.sign, "ID", "Code"), organ.currency, new { @class = "select2", @onchange = "curF('F')", @id = "curFid" })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })
                                <input type="text" value="" class="form-control" id="curFname" disabled />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span> @organ.Currencyrate </span>
                            </label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Budget.Currency_rate, new { htmlAttributes = new { @class = "form-control", id = "R", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.budget_type, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span id="ANN">@organ.amountnative</span>
                            </label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Budget.amount_native, new { htmlAttributes = new { @class = "form-control", id = "N", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.amount_native, "", new { @class = "text-danger" })

                            </div>
                            <label class="control-label col-md-2">
                                <span id="AFF">@organ.ammountforigne</span>
                            </label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Budget.ammount_forigne, new { htmlAttributes = new { @class = "form-control", id = "F", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.ammount_forigne, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">
                                <span> @organ.Remainingnative </span>
                            </label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Budget.Remaining_native, new { htmlAttributes = new { @Readonly = true, @class = "form-control", id = "RN", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.Remaining_native, "", new { @class = "text-danger" })

                            </div>
                            <label class="control-label col-md-2">
                                <span> @organ.remainingforigne </span>
                            </label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Budget.Remaining_forgin, new { htmlAttributes = new { @Readonly = true, @class = "form-control", id = "RF", type = "number", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Budget.Remaining_forgin, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-12">
                            <ul class="nav nav-tabs bordered">
                                <!-- available classes "bordered", "right-aligned" -->
                                <li class="active">
                                    <a href="#Budgetdetails" data-toggle="tab">
                                        <span class="visible-xs"><i class="entypo-home"></i></span>
                                        <span class="hidden-xs">@organ.budgetdetails</span>
                                    </a>
                                </li>
                                <li>
                                    <a href="#BudgetStatus" data-toggle="tab">
                                        <span class="visible-xs"><i class="entypo-user"></i></span>
                                        <span class="hidden-xs">@organ.budgetstatus</span>
                                    </a>
                                </li>
                                <li>
                                    <a href="#Justification" data-toggle="tab">
                                        <span class="visible-xs"><i class="entypo-user"></i></span>
                                        <span class="hidden-xs">@organ.justification</span>
                                    </a>
                                </li>
                            </ul>
                            <div class="tab-content">
                                <div class="tab-pane active" id="Budgetdetails" style="overflow: hidden;width: auto;height: auto;">

                                    <div class="form-group">
                                        <label class="control-label col-md-2">
                                            <span> @organ.budgetitem </span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.DropDownList("items", new SelectList(ViewBag.items, "ID", "Code"), organ.item, new { @class = "select2", @id = "ite" })
                                        </div>
                                        <div class="col-md-2"></div>
                                        <div class="control-label col-md-4">
                                            <a onclick="additems()" class="btn btn-success"> @organ.ADDnewbudgetitem </a>
                                            <a onclick="Reaset()" class="btn btn-success"> @organ.clearall </a>

                                        </div>


                                    </div>
                                    <hr />
                                    <hr />
                                    <div id="itemsdiv">
                                        @if (Model.Budget.Budget_detailsID != null)
                                        {
                                        foreach (var item in Model.Budget.Budget_details)
                                        {
                                            <div>
                                                <div class="form-group">
                                                    <label class="control-label col-md-1">
                                                        <span>@organ.item </span>
                                                    </label>
                                                    <div class="col-md-2">
                                                        <input type="text" value="@item.Budget_class_items.Name" class="form-control" id="itemnamee" disabled />
                                                        <input type="text" name="item" value="@item.Budget_class_items.ID" id="itemid" hidden />
                                                    </div>
                                                    <label class="control-label col-md-1">
                                                        <span>@organ.native</span>
                                                    </label>
                                                    <div class="col-md-2">
                                                        <input type="number" min="0" value=@item.amount_native class="form-control" id="amountNn" onkeyup="calN($(this),$(this).parent().next().next().children())" name="AmountN" />
                                                    </div>
                                                    <label class="control-label col-md-1">
                                                        <span>@organ.forign</span>
                                                    </label>
                                                    <div class="col-md-2">
                                                        <input type="number" value="@item.amount_forign" min="0" class="form-control" id="amountFf" readonly onkeyup="calf($(this))" name="AmountF" />
                                                    </div>
                                                    <label class="control-label col-md-1">
                                                        <div>@organ.comment</div>
                                                    </label>
                                                    <div class="col-md-2">
                                                        <input type="text" class="form-control" id="comment" name="commentt" value="@item.comment" />

                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-12" style="text-align:center">
                                                        <input type="button" value=@organ.remove class="remove btn btn-danger" onclick="remove($(this), $(this).parent().parent().prev().children())" />

                                                    </div>
                                                </div>
                                                <hr />
                                            </div>
                                      
                                        }
                                        }
                                    </div>
                                </div>
                                <div class="tab-pane" id="BudgetStatus">
                                    <div class="form-group">
                                        <label class="control-label col-md-2">
                                            <span>@organ.status</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EnumDropDownListFor(m => m.status.statu, new { @readonly = true, @class = "select2" })
                                            @Html.ValidationMessageFor(model => model.status.statu, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="form-group">

                                        <label class="control-label col-md-2">
                                            <span> @organ.createdby</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.created_by, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.status.created_by, "", new { @class = "text-danger" })

                                        </div>
                                        <label class="control-label col-md-2">
                                            <span>@organ.createdDate</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.created_bydate, new { htmlAttributes = new { @class = "form-control datepicker", id = "datefrom" } })
                                            @Html.ValidationMessageFor(model => model.status.created_bydate, "", new { @class = "text-danger" })

                                        </div>

                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-2">
                                            <span>@organ.Reportasreadyby</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.report_as_ready_by, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.status.report_as_ready_by, "", new { @class = "text-danger" })

                                        </div>
                                        <label class="control-label col-md-2">
                                            <span>@organ.ReportasreadyDate</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.report_as_ready_bydate, new { htmlAttributes = new { @class = "form-control datepicker", id = "datefrom" } })
                                            @Html.ValidationMessageFor(model => model.status.report_as_ready_bydate, "", new { @class = "text-danger" })

                                        </div>

                                    </div>


                                    <div class="form-group">
                                        <label class="control-label col-md-2">
                                            <span>@organ.approvedby</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.approved_by, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.status.approved_by, "", new { @class = "text-danger" })

                                        </div>
                                        <label class="control-label col-md-2">
                                            <span>@organ.approvedDate</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.approved_bydate, new { htmlAttributes = new { @class = "form-control datepicker", id = "datefrom" } })
                                            @Html.ValidationMessageFor(model => model.status.approved_bydate, "", new { @class = "text-danger" })

                                        </div>

                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-2">
                                            <span>@organ.Rejectedby</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.Rejected_by, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.status.Rejected_by, "", new { @class = "text-danger" })

                                        </div>
                                        <label class="control-label col-md-2">
                                            <span>@organ.RejectedDate</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.Rejected_bydate, new { htmlAttributes = new { @class = "form-control datepicker", id = "datefrom" } })
                                            @Html.ValidationMessageFor(model => model.status.Rejected_bydate, "", new { @class = "text-danger" })

                                        </div>

                                    </div>

                                    <div class="form-group">
                                        <label class="control-label col-md-2">
                                            <span>@organ.cancaledby</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.cancaled_by, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.status.cancaled_by, "", new { @class = "text-danger" })

                                        </div>
                                        <label class="control-label col-md-2">
                                            <span>@organ.cancaledDate</span>
                                        </label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.status.cancaled_bydate, new { htmlAttributes = new { @class = "form-control datepicker", id = "datefrom" } })
                                            @Html.ValidationMessageFor(model => model.status.cancaled_bydate, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane" id="Justification">
                                    @Html.TextAreaFor(m => m.justification.justifiaction, 10, 500, new { });
                                    @Html.ValidationMessageFor(model => model.justification.justifiaction, "", new { @class = "text-danger" })
                                </div>

                            </div>


                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input id="btnSave" class="btn btn-success" onclick="ch()" value=@organ.edit />
                                    <a href="@Url.Action("index", "Budget")" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>@organ.Back</a>
                                </div>
                            </div>
                        </div>
                    </div>
        }
    </div>
</div>
<script>
    function org()
    {
        debugger
        var id = $("#orgid").val();
        $.ajax({
            type: "post",
            url: "/Budget/getorg",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#orgname").val(result.unit_Description);


            }
        });
    }
    function curN(I) {
        debugger
        var id = $("#curNid").val();
        $.ajax({
            type: "post",
            url: "/Budget/getcurrency",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#curNname").val(result.Name + "__" + result.symbol);
                if (I == 'N')
                {
                    document.getElementById("ANN").innerHTML = ("amount _" + result.symbol);
                }
                if (I == 'F')
                {
                    document.getElementById("AFF").innerHTML = ("amount _" + result.symbol);
                }
            }
        });
    }
    function curF(I) {
        debugger
        var id = $("#curFid").val();
        $.ajax({
            type: "post",
            url: "/Budget/getcurrency",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#curFname").val(result.Name+"__"+ result.symbol);
                if (I == 'N') {
                    document.getElementById("ANN").innerHTML = ("amount _" + result.symbol);
                }
                if (I == 'F') {
                   document.getElementById("AFF").innerHTML =("amount _" + result.symbol);
                }
            }
        });
    }
    $("#F").keyup(function (e) {
        debugger
        var N = $("#N").val();
        var F = $("#F").val();
        var R = $("#R").val();


        if (R == 0 && R =="") {
            var R = parseFloat(F / N);
            $("#R").val(R);
        }
        if (N == 0 && N == "") {
            var N = parseFloat(F / R);
            $("#N").val(N);
            $("#RN").val(N);
        }
        else
        {
            //var R = parseInt(F / N);
            //$("#R").val(R);
            var N = parseFloat(F / R);
            $("#N").val(N);
            $("#RN").val(N);
        }
        $("#RF").val(F);

        var Nn = parseFloat($("#F").val());
        var rr = parseFloat($("#R").val());
        var all_value = document.getElementsByName("AmountF");
        var u = 0;
        $.each(all_value, function (key, value) {
            debugger
            var op = value.value;
            if (op != "" && op != "0") {
                u = parseFloat(u) + parseFloat(op)
            }
        });
        $("#RF").val(Nn - u);
        $("#RN").val((Nn - u) / rr);
    });
    $("#N").keyup(function (e) {
        debugger
        var N = $("#N").val();
        var F = $("#F").val();
        var R = $("#R").val();
        if (R == 0 && R == "")
        {
            var R = parseFloat(F / N);
            $("#R").val(R);
        }
        if (F == 0 || F == "")
        {
            var F = parseFloat(N * R);
            $("#F").val(F);
            $("#RF").val(F);
        }
        else {
            //var R = parseInt(F / N);
            //$("#R").val(R);
            var F = parseFloat(N * R);
            $("#F").val(F);
            $("#RF").val(F);
        }







        var Nn = parseFloat($("#N").val());
        var rr = parseFloat($("#R").val());
        var all_value = document.getElementsByName("AmountN");
        var u = 0;
        $.each(all_value, function (key, value) {
            debugger
            var op = value.value;
            if (op != "" && op != "0") {
                u = parseFloat(u) + parseFloat(op)
            }
        });
        $("#RN").val(Nn - u);
        $("#RF").val((Nn - u)*rr);
    });
    $("#R").keyup(function (e) {
        debugger
        var N = $("#N").val();
        var F = $("#F").val()
        var R = $("#R").val();
        if ((F == "0" || F == "") && (N == "0" || N == ""))
        {

        }
        else if ((F == "0" || F == "") && (N != "0" || N != ""))
        {
            var F = parseFloat(N * R);
            $("#F").val(F);
            $("#RF").val(F);
            $("#RN").val(N);
        }
       else if ((N == "0" || N == "")&&(F!="0"||F!=""))
        {
            var N = parseFloat(F / R);
            $("#N").val(N);
            $("#RF").val(F);
            $("#RN").val(N);
        }
       else if ((F != "0" || F != "") && (N != "0" || N != ""))
        {
            var F = parseFloat(N * R);
            $("#F").val(F);
            $("#RF").val(F);

        }

    });
    $("#YF").keyup(function (e) {
        var value = $("#YF").val();
        $("#YT").val(parseInt(parseInt(value) + parseInt(1)));
    });
    $("#YT").keyup(function (e) {
        var value = $("#YT").val();
        $("#YF").val(parseInt(parseInt(value) - parseInt(1)));
    });

</script>
<style>
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>


<script>
    function additems()
    {
        var ch = check();
        if (ch == 0) {
            var n = $("#N").val();
            var f = $("#F").val();
            debugger
            if (n == 0 || n == "" || f == 0 || f == "") {
                alert('you must enter amount native and amount forign at first ');
            }
            else {
                var i = "";
                var d = $("#ite").val();
                var firstdrop = " ";
                $.ajax
                  ({
                      type: "post",
                      url: "/Budget/items",
                      data: { "id": d },
                      success: function (result) {
                          debugger
                          var i = "<div><div class='form-group'>" +
                                                    "<label class='control-label col-md-1'>" +
                                                       "<span>@organ.item </span>" +
                                                    "</label>" +
                                                    "<div class='col-md-2'>" +

                                                          "<input type='text' value='" + result.Name + "' class='form-control' id='itemnamee' disabled />" +
                                                          "<input type='text'  name='item' value='" + result.ID + "' id='itemid' hidden />" +

                                                      "</div>" +
                                                      "<label class='control-label col-md-1'>" +
                                                          "<div>@organ.native</div>" +
                                                      "</label>" +
                                                    "<div class='col-md-2'>" +
                                                           "<input type='number' min='0' value='0' class='form-control' id='amountNn' onkeyup='calN($(this),$(this).parent().next().next().children())' name='AmountN' />" +
                                                    "</div>" +
                                                    "<label class='control-label col-md-1'>" +
                                                        "<div>@organ.forign</div>" +
                                                    "</label>" +
                                                    "<div class='col-md-2'>" +
                                                           "<input type='number'  value='0' min='0' class='form-control' id='amountFf' readonly  onkeyup='calf($(this))' name='AmountF' />" +
                                                    "</div>" +
                                                      "<label class='control-label col-md-1'>" +
                                                       "<div>@organ.comment</div>" +
                                                    "</label>" +
                                                      "<div class='col-md-2'>" +
                                                          "<input type='text' class='form-control' id='comment' name='commentt' />"
                                                          +
                                                      "</div>" +
                                                  "</div><div class='form-group'>" +
                                                  "<div class='col-md-12' style='text-align:center'>" +
                                                           "<input type='button' value=@organ.remove class='remove btn btn-danger' onclick='remove($(this),$(this).parent().parent().prev().children())' />" +

                                                   "</div></div><hr/></div>";
                          $("#itemsdiv").append(i);
                          $("#ite").select2("val", "Select items");
                      }
                  });


            }
        }
    }
  
    function calN(th,h)
    {
       
       
        debugger
        var thh = parseFloat(th.val());
        var R = parseFloat($("#R").val());
        var test = (parseFloat(h.val()) / R);
        if (test == thh) {

        }
        else {
            var N = parseFloat($("#N").val());
            var F = parseFloat($("#F").val());
            var RN = parseFloat($("#RN").val());
            var RfF = parseFloat($("#RF").val());

            var oi = th.val();
            if (thh > RN) {
                var u = 0;
                alert("Summation of amounts in all items greater than Available value ");
                th.val("");
                h.val("");
                var jj = document.getElementsByName("AmountN");
                $.each(jj, function (key, value) {
                    debugger
                    var op = value.value;
                    if (op != "" && op != "0") {
                        u = parseFloat(u) + parseFloat(op)
                    }

                });
                $("#RN").val(N - u);
                $("#RF").val(F - (u * R));
            }
            else if (oi == 0 || oi == "") {
                var t = parseFloat(h.val()) + RfF;
                if (h.val() == "0") {

                }
                else {
                    var tt = (parseFloat(h.val()) + RfF) / R;
                    $("#RF").val(t);
                    $("#RN").val(tt);
                    h.val("");
                }
            }
            else {
                $("#RN").val(RN - parseFloat(thh));
                var oo = parseFloat($("#RN").val());
                h.val(thh * R);
                $("#RF").val(oo * R);
            }
            var all_value = document.getElementsByName("AmountN");
            var u = 0;
            var Nn = parseFloat($("#N").val());
           
        }
    }
    function calF(th)
    {
        debugger
        var thh = parseFloat(th.val());
        var N = parseFloat($("#N").val());
        var F = parseFloat($("#F").val());
        var RN = parseFloat($("#RN").val());
        var RF = parseFloat($("#RF").val());
        var R = parseFloat($("#R").val());
        if (thh > RF)
        {
            alert("Summation of amounts in all items greater than Available value ");
            th.val("");
        }
        else
        {

            $("#RF").val(F - parseFloat(thh));
            var oo = parseFloat($("#RF").val());
            $("#RN").val(oo * R);

        }
    }
    function remove(thi, l) {
        debugger
        thi.parent().parent().parent().remove();
        var inputN = l.children()[4];
        var inputF = l.children()[6];
        var v1 = parseFloat(inputN.value);
        var v2 = parseFloat(inputF.value);
        var RN = parseFloat($("#RN").val());
        var RF = parseFloat($("#RF").val());
        $("#RN").val(v1 + RN);
        $("#RF").val(v2 + RF);
    }
    org();
    curN('N');
    curF('F')


    function check() {
        ////////////
        debugger
        var all_value = document.getElementsByName("AmountN");
        var u = 0;
        var Nn = parseFloat($("#N").val());
        $.each(all_value, function (key, value) {
            debugger
            var op = value.value;
            if (op != "" && op != "0") {
                u = parseFloat(u) + parseFloat(op)
            }
        });
        if (u > Nn && u != 0) {
            alert("this value small than summation on budget items");
            var R = parseFloat($("#R").val());
            $("#F").val(R * u);
            $("#N").val(u);
            $("#RN").val(0);
            $("#RF").val(0);
            return 1;
        }
        else
            return 0;
        ////////////////
    }

    function ch() {
        debugger
        var t = check();
        if (t == 0) {
            //document.getElementById("btnSave").attr("type", "submit");
       
                $("#dd").submit();
       
        }

    }
    function Reaset() {
        debugger;
        $("#R").val("0");
        $("#N").val("0");
        $("#F").val("0");
        $("#RN").val("0");
        $("#RF").val("0");
        $("#itemsdiv").empty();
        $("#R").attr("Readonly", false);
    }

    var Nn = parseFloat($("#N").val());
    var rr = parseFloat($("#R").val());
    var all_value = document.getElementsByName("AmountN");
    var u = 0;
    $.each(all_value, function (key, value) {
        debugger
        var op = value.value;
        if (op != "" && op != "0") {
            u = parseFloat(u) + parseFloat(op)
        }
    });
    $("#RN").val(Nn - u);
    $("#RF").val((Nn - u) * rr);
    $("#R").attr("Readonly", true);
</script>

@section scripts{}