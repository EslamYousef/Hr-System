@model HR.Models.Application.Position_Information_Rec
@using HR.Resource;
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}



@Scripts.Render("~/bundles/jqueryval")
<div class="content-wrapper">

   

    <!-- Main content -->
    <section class="content">

        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Edit", "Position_Information", new { id2 = ViewBag.idemp }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <div class="sec-nav">
                        <div><i class="far fa-save"></i><button type="submit" class="create-btn" />@organ.Save</div>
                        <div><i class="fas fa-plus"></i><a href="@Url.Action("create", "Position_Information")" class="create-btn">@pers_2.new_</a></div>
                        <div><i class="far fa-trash-alt"></i><input type="button" href="@Url.Action("index","Position_Information")" class="create-btn" value=@organ.delete /></div>
                        <div><i class="fas fa-undo"></i><a style="" href="@Url.Action("index","Application",new {id=ViewBag.idemp})" class="create-btn"> @pers_2.Back</a></div>
                    </div>
                    <hr /><hr /><hr />
                    <section class="content-header">
                        <h1>
                            @Personnel.EditPositionInformation
                        </h1>
                    </section>
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @Html.HiddenFor(m => m.ID)

                        <hr />

                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            <label class="control-label col-md-2"style="color:red">@Personnel.CommitteResolutionNo</label>
                            <div class="col-md-3">
                                <input type="text" value="@ViewBag.ApplicationCode" disabled />
                            </div>
                            <label class="control-label col-md-1"style="color:red">@Personnel.ApplicantId</label>
                            <div class="col-md-3">
                                <input type="text" value="@ViewBag.ApplicationApp" disabled />
                            </div>
                            <div class="col-md-3">
                                <button type="submit" id="btnSubmit" name="Command" value="Submit" class="btn btn-success">@Personnel.Application</button>
                            </div>
                        </div>



                        <div>

                            <div class="tab-content">

                                <div class="tab-pane active" id="home" style="overflow: hidden;width: auto;height: auto;">

                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Jobdesc</label>
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(m => m.job_descId, new SelectList(ViewBag.job_desc, "ID", "Code"), @Personnel.SelectJobdesc, new { @class = "select2", @onchange = "CountryName()", id = "country" })
                                            @Html.ValidationMessageFor(model => model.job_descId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Defaultlocationdesc</label>
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(m => m.Default_location_descId, new SelectList(ViewBag.Default_location, "ID", "Code"), @Personnel.SelectDefaultlocationdesc, new { @eadonly = true, @class = "select2", @onchange = "getcite()", id = "citeid", @disabled = true })
                                            @Html.ValidationMessageFor(model => model.Default_location_descId, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Locationdesc</label>
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(m => m.Location_descId, new SelectList(ViewBag.location_desc, "ID", "Code"), @Personnel.SelectLocationdesc, new { @class = "select2", @onchange = "getcite2()", id = "citeid2", @disabled = true })
                                            @Html.ValidationMessageFor(model => model.Location_descId, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-2"style="color:red">@Personnel.Slotdesc</label>
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(m => m.SlotdescId, new SelectList(ViewBag.job_slot_desc, "ID", "Code"), @Personnel.Selectslot, new { @class = "select2", @onchange = "slot()", id = "ter", @disabled = true })
                                            @Html.ValidationMessageFor(model => model.SlotdescId, "", new { @class = "text-danger" })

                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Jobleveldesc</label>
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(m => m.Job_level_gradeId, new SelectList(ViewBag.Job_level_grade, "ID", "Code"), @Personnel.SelectJobleveldesc, new { @class = "select2", @onchange = "areaName()", id = "area", @disabled = true })
                                            @Html.ValidationMessageFor(model => model.Job_level_gradeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Unitdesc</label>
                                        <div class="col-md-4">
                                            @Html.DropDownListFor(m => m.Organization_ChartId, new SelectList(ViewBag.Organization_Chart, "ID", "Code"), @Personnel.SelectUnitdesc, new { @class = "select2", @onchange = "getstate()", id = "state", @disabled = true })
                                            @Html.ValidationMessageFor(model => model.Organization_ChartId, "", new { @class = "text-danger" })

                                        </div>
                                    </div>


                                    <div class="form-group">
                                        <label class="control-label col-md-2"style="color:red">@Personnel.Fromdate</label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.From_date, new { @value = "01/01/1900", htmlAttributes = new { @class = "form-control StartDate", @onchange = "Save()", @id = "Start", @type = "date" } })
                                            @Html.ValidationMessageFor(model => model.From_date, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="control-label col-md-2"style="color:red">@Personnel.Years</label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Years, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "Yearr", @type = "number", @min = 0 } })

                                            @Html.ValidationMessageFor(model => model.Years, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="control-label col-md-2"style="color:red">@Personnel.Todate</label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.To_date, new { @value = "01/01/1900", htmlAttributes = new { @class = "form-control EndDate", @onchange = "Save2()", @id = "End", @type = "date" } })
                                            @Html.ValidationMessageFor(model => model.To_date, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="control-label col-md-2" style="color:red">@Personnel.Months</label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Months, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "months", @type = "number", @min = 0 } })

                                            @Html.ValidationMessageFor(model => model.Months, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Workingsystem</label>
                                        <div class="col-md-4">
                                            @Html.EnumDropDownListFor(model => model.Working_System, new { @class = "select2" })
                                            @Html.ValidationMessageFor(model => model.Working_System, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Positionstatus</label>
                                        <div class="col-md-4">
                                            @Html.EnumDropDownListFor(model => model.Position_Status, new { @class = "select2" })
                                            @Html.ValidationMessageFor(model => model.Position_Status, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group" hidden>
                                        <div class="col-md-offset-2 col-md-10">
                                            <a href="@Url.Action("index","Application",new {id=ViewBag.idemp})" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>@Personnel.Back</a>
                                            <input type="submit" value="@Personnel.Edit1" class="btn btn-success" />
                                        </div>
                                    </div>


                                </div>


                            </div>
                        </div>
                    </div>
                }

            </div>

        </div>

    </section>
</div>

@section scripts{}




<script>
    $(function () {
        debugger
        CountryName()
    })
    function CountryName() {
            var id = $("#country").val();

        $.ajax({
            type: "post",
            url: "/Helper/GetJobtitle",
            dataType: "json",
            data: { "id": id },
            async:false,
            success: function (result) {
                debugger
                $("#countryname1").val(result.name);
                $("#area").removeAttr("disabled");
                //     areaName(result.Organization_unit_codeID.worklocationid)
                areaname(result.joblevelsetupID)
                $("#area").removeAttr("disabled");
                $("#s2id_area").removeAttr("disabled");
                $("#s2id_state").removeAttr("disabled");
                $("#state").removeAttr("disabled");

                getter(result.ID)
                getstate(result.Organization_unit_codeID)
                $("#s2id_getstate").removeAttr("disabled"); 

            },
            error: function () {

                $("#countryname1").val(" ");
            }
        });
    }


    function areaname(did) {


        $.ajax({
            type: "post",
            url: "/helper/getjoblevel",
            data: { "id": did },
            async: false,

            success: function (result) {

                $("#ter").removeAttr("disabled");
                $("#area").select2("val", result.ID);
                $("#areaname1").val(result.Name);
                //$("#area").attr("readonly", true);
                //$("#area").prop("readonly", true);
            },
            error: function () {

                $("#areaname1").val(" ");
            }
        });
    }
    function getter(did) {

        var oo = $("#employeeId").val();
        var id = $("#ter").val();

        $.ajax({
            type: "post",
            url: "/Helper/GetJobSolts",
            data: { "id": did, "did": oo },
            async: false,
            success: function (result) {

                var finalresult = "";
                finalresult = "<option value='0' > Choose Slot desc </option>";
                $.each(result, function (key, value) {
                    if (value.ID == parseInt(@Model.SlotdescId)) {
                        finalresult += "<option selected value='" + value.ID + "' >" + "[  " + value.Code + " ]</option>";
                    }
                    else {
                        finalresult += "<option value='" + value.ID + "' >" + "[  " + value.Code + " ]</option>";
                    }
                    //"--"+ value.slot_description +
                });
                $("#ter").html(finalresult);
                //      $("#citeid").removeAttr("disabled");
                //$("#ter").select2("val", result.ID);
                slot();
                //    getallcite(result.ID);
                $("#state").removeAttr("disabled");

            },
            error: function () {

                $("#tername").val(" ");
            }
        });
    }
    function slot() {

        var id = $("#ter").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetSolt",
            data: { "id": id },
            async: false,
            success: function (result) {

                $("#tername").val(result.slot_code);
            },
            error: function () {

                $("#tername").val(" ");
            }
        });
    }
    function getstate(did) {

        $.ajax({
            type: "post",
            url: "/Helper/GetOrganizationChart",
            data: { "id": did },
            async: false,
            success: function (result) {

                $("#state").select2("val", result.ID);

                $("#citeid").removeAttr("disabled");
                $("#statename").val(result.unit_Description);
                getcite(result.worklocationid)
                getcite2(result.worklocationid)
                //$("#state").attr("readonly", true);
                //$("#state").prop("readonly", true);
            },
            error: function () {

                $("#statename").val(" ");
            }
        });
    }

    function getcite(did) {
        debugger
        $.ajax({
            type: "post",
            url: "/Helper/GetWorklocation",
            data: { "id": did },
            async: false,
            success: function (result) {

                $("#citeid").select2("val", result.ID);
                $("#cityname").val(result.Name);
                $("#citeid").attr("readonly", true);
                $("#citeid").prop("readonly", true);
                $("#citeid2").removeAttr("disabled");
                $("#s2id_citeid2").removeAttr("disabled");
            },
            error: function () {

                $("#cityname").val(" ");
            }
        });
    }

    function getcite2(did) {
        debugger
        $.ajax({
            type: "post",
            url: "/Helper/GetWorklocation",
            data: { "id": did },
            async: false,
            success: function (result) {
                debugger

                $("#citeid2").select2("val", result.ID);
                $("#cityname2").val(result.Name);

            },
            error: function () {

                $("#cityname2").val(" ");
            }
        });
    }

    function GetDataById()
    {
        debugger
        let x = window.location.href.split('/')[5];
        $.ajax({
            type: "post",
            url: "/Helper/GetDataByIdPositionRec",
            data: { "id": x },
            success: function (result) {
                debugger
                if (result) {
                    var date = parseJsonDate(result.To_date)
                    var month;
                    if ((date.getMonth() + 1) < 10) {
                        month = "0" + (date.getMonth() + 1).toString();
                    }
                    if ((date.getDate()) < 10) {
                        day = "0" + (date.getDate() ).toString();
                    }
                }


                else {
                    month = date.getMonth() + 1;
                    day = date.getDate();
                }

                var d =date.getFullYear()+ '-'+ month + '-' +day;
                $("#End").val(d);
                Save();
                Save2();
                console.log(result);
            },
            error: function () {


            }
        });
    }
 //   GetDataById();
    function parseJsonDate(jsonDateString)
    {
        return new Date(parseInt(jsonDateString.replace('/Date(', '')));
    }
    ///////////////////////////////////
    function GetDataById2() {
        debugger
        let x = window.location.href.split('/')[5];
        $.ajax({
            type: "post",
            url: "/Helper/GetDataByIdPositionRec",
            data: { "id": x },
            success: function (result) {
                debugger
                if (result) {
                    var date = parseJsonDate(result.From_date)
                    var month;
                    if ((date.getMonth() + 1) < 10) {
                        month = "0" + (date.getMonth() + 1).toString();
                        day = date.getDate();
                    }
                    if ((date.getDate()) < 10) {
                        day = "0" + (date.getDate() ).toString();
                    }
                }
                else{
                    month = date.getMonth() + 1;
                day = date.getDate();
            }
                var d = date.getFullYear() + '-' + month + '-' + day;
                $("#Start").val(d);
                GetDataById();
                console.log(result);
            },
            error: function () {


            }
        });
    }
  //  GetDataById2();
    function parseJsonDate(jsonDateString) {
        return new Date(parseInt(jsonDateString.replace('/Date(', '')));
    }
    function GetDiffDates(StartDate, EndDate) {
        if (StartDate && EndDate) {
            $.get("/Employee_military_service_calling/DifferenceTwoDates?StartDate=" + StartDate + '&EndDate=' + EndDate, function (data, status) {

                if (data) {
                    $("#Days").val(data.DateDiff.Days);
                    $("#months").val(data.DateDiff.Months);
                    $("#Yearr").val(data.DateDiff.Years);
                }
            });
        }
    }

    function Save() {


        var StartDate = new Date($(".StartDate").val());
        var EndDate = new Date($(".EndDate").val());

           var from = $(".StartDate").val();
           var to = $(".EndDate").val();

        if (to > from) {
            GetDiffDates(from, to);
        }
        else {
            $("#Yearr").val("0");
            $("#months").val("0");
        }
    };
    function Save2() {

        var StartDate = new Date($(".StartDate").val());
        var EndDate = new Date($(".EndDate").val());

           var from = $(".StartDate").val();
             var to = $(".EndDate").val();
        if (to > from) {
            GetDiffDates(from, to);
        }
        else {
            $("#Yearr").val("0");
            $("#months").val("0");
        }
    };
    function GetDataById5(date, id) {
        var valx = new Date(date);
        var month;
        if ((valx.getMonth() + 1) < 10) {
            month = "0" + (valx.getMonth() + 1).toString();
        }
        else {
            month = date.getMonth() + 1;
        }
        var day = parseInt(valx.getDate());
        if (day < 10) {
            day = "0" + (valx.getDate()).toString();
        }
        else {
            day = valx.getDate();
        }
        var d = valx.getFullYear() + '-' + month + '-' + day;
        $('#' + id).val(d);
    }
</script>

<script>
    $(document).ready(function () {
        $("#employeeId").attr("disabled", true);
        GetDataById2();

      
        GetDataById5('@Model.From_date', "Start");
        GetDataById5('@Model.To_date', "End");
    });
</script>
<style>

    /*Create Page*/


    .sec-nav {
        z-index: 9999;
        position: fixed;
        top: 47px;
        background: #faf9f8;
        border-bottom: 1px solid #bebbb8;
        display: block;
        width: 100%;
        left: 50px;
        padding-left: 10px;
        height: 60px;
        line-height: 60px;
    }

        .sec-nav div {
            display: inline-block;
            padding: 5px 8px;
            width: unset;
            border: 0;
            color: #000;
            font-size: 16px;
            height: 60px;
        }

            .sec-nav div:hover {
                background: #eee;
                color: #000;
            }

                .sec-nav div:hover input {
                    color: #000;
                }

    .create-btn {
        border: 0;
        height: 100%;
        background-color: transparent;
    }

    .sec-nav div svg {
        color: #2266e3;
        font-size: 17px;
    }

    .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {
        /*float: unset*/
    }

    label {
        text-align: left;
        font: normal normal 400 12px/18px 'Segoe UI',tahoma,sans-serif;
        color: #605e5c;
        display: block;
        margin-bottom: 0;
        max-width: 220px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight: 600;
        margin-top: 15px;
    }

    .form-horizontal .form-group {
        margin: 0 !important;
    }

    input {
        height: 35px;
        color: #000;
    }

        input:active {
            border: 1px solid #2266e3;
        }

    .form-group .row > div {
        margin-bottom: 10px;
    }

    .content-wrapper {
        margin-left: 15px;
    }

    .col-md-4 {
        width: 20% !important;
        margin-bottom: 15px;
    }

    .col-md-2 {
        width: 20% !important;
        margin-bottom: 15px;
    }

    .col-md-3 {
        width: 20% !important;
        margin-bottom: 15px;
    }
</style>