@model HR.Models.Application.Position_Information_Rec
@using HR.Resource;
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}

@Scripts.Render("~/bundles/jqueryval")


<div class="content-wrapper">

    <section class="content-header">
        <h1>
            @Personnel.CreatePositionInformation
        </h1>
    </section>

    <!-- Main content -->
    <section class="content">
        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Create", "Position_Information", new { id2 = ViewBag.idemp }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                <div class="form-horizontal">

                    <hr />

                    @if (TempData["Message"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            @TempData["Message"]
                        </div>
                    }

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })



                    <div class="form-group">
                        <label class="control-label col-md-2">@Personnel.CommitteResolutionNo</label>
                        <div class="col-md-3">
                            <input type="text" value="@ViewBag.ApplicationCode" disabled />
                        </div>
                        <label class="control-label col-md-1"> @Personnel.ApplicantId</label>
                        <div class="col-md-3">
                            <input type="text" value="@ViewBag.ApplicationApp" disabled />
                        </div>
                        <div class="col-md-3">
                            <button type="submit" id="btnSubmit" name="Command" value="Submit" class="btn btn-success"> @Personnel.Application</button>
                        </div>
                    </div>

                    <div>
                        <div class="tab-content">
                            @*<div class="tab-pane active" id="home" style="overflow: hidden;width: auto;height: auto;">*@

                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Jobdesc</label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(m => m.job_descId, new SelectList(ViewBag.job_desc, "ID", "Code"), @Personnel.SelectJobdesc, new { @class = "select2", @onchange = "CountryName()", id = "country" })
                                        @Html.ValidationMessageFor(model => model.job_descId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Defaultlocationdesc</label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(m => m.Default_location_descId, new SelectList(ViewBag.Default_location, "ID", "Code"), @Personnel.SelectDefaultlocationdesc, new { @eadonly = true, @class = "select2", @onchange = "getcite()", id = "citeid", @disabled = true })
                                        @Html.ValidationMessageFor(model => model.Default_location_descId, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Locationdesc</label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(m => m.Location_descId, new SelectList(ViewBag.location_desc, "ID", "Code"), @Personnel.SelectLocationdesc, new { @class = "select2", @onchange = "getcite2()", id = "citeid2", @disabled = true })
                                        @Html.ValidationMessageFor(model => model.Location_descId, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Slotdesc</label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(m => m.SlotdescId, new SelectList(ViewBag.job_slot_desc, "ID", "Code"), @Personnel.Selectslot, new { @class = "select2", @onchange = "slot()", id = "ter", @disabled = true })
                                        @Html.ValidationMessageFor(model => model.SlotdescId, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Jobleveldesc</label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(m => m.Job_level_gradeId, new SelectList(ViewBag.Job_level_grade, "ID", "Code"), @Personnel.SelectJobleveldesc, new { @class = "select2", @onchange = "areaName()", id = "area", @disabled = true })
                                        @Html.ValidationMessageFor(model => model.Job_level_gradeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Unitdesc</label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(m => m.Organization_ChartId, new SelectList(ViewBag.Organization_Chart, "ID", "Code"), @Personnel.SelectUnitdesc, new { @class = "select2", @onchange = "getstate()", id = "state", @disabled = true })
                                        @Html.ValidationMessageFor(model => model.Organization_ChartId, "", new { @class = "text-danger" })

                                    </div>
                                </div>


                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Fromdate</label>
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.From_date, new { @value = "01/01/1900", htmlAttributes = new { @class = "form-control  StartDate yy", @onchange = "Save()", @id = "Start", @type = "date" } })
                                        @Html.ValidationMessageFor(model => model.From_date, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="control-label col-md-2">@Personnel.Years</label>
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.Years, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "Yearr", @type = "number", @min = 0 } })

                                        @Html.ValidationMessageFor(model => model.Years, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Todate</label>
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.To_date, new { @value = "01/01/1900", htmlAttributes = new { @class = "form-control  EndDate yyy", @onchange = "Save2()", @id = "End", @type = "date" } })
                                        @Html.ValidationMessageFor(model => model.To_date, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="control-label col-md-2">@Personnel.Months</label>
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.Months, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "months", @type = "number", @min = 0 } })

                                        @Html.ValidationMessageFor(model => model.Months, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Workingsystem</label>
                                    <div class="col-md-4">
                                        @Html.EnumDropDownListFor(model => model.Working_System, new { @class = "select2" })
                                        @Html.ValidationMessageFor(model => model.Working_System, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-2">@Personnel.Positionstatus</label>
                                    <div class="col-md-4">
                                        @Html.EnumDropDownListFor(model => model.Position_Status, new { @class = "select2" })
                                        @Html.ValidationMessageFor(model => model.Position_Status, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <a href="@Url.Action("index","Application",new {id=ViewBag.idemp})" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>@Personnel.Back</a>
                                        <input type="submit" value="@Personnel.Create" class="btn btn-success" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                @*</div>*@
                }

            </div>

        </div>

    </section>
</div>

@section scripts{}
<script>
    $(document).ready(function () {
        $("#employeeId").attr("disabled", true);
        Save();
        Save2();
        GetDataById5('@Model.To_date', "Start");
        GetDataById5('@Model.From_date', "End");

    });
</script>

<script>
        function CountryName() {

            var id = $("#country").val();

            $.ajax({
                type: "post",
                url: "/Helper/GetJobtitle",
                dataType: "json",
                data: { "id": id },
                success: function (result) {
                    debugger
                    $("#countryname1").val(result.name);
                    $("#area").removeAttr("disabled");
                    areaname(result.joblevelsetupID)
                    $("#area").removeAttr("disabled");
                    $("#s2id_area").removeAttr("disabled");
                    $("#s2id_state").removeAttr("disabled");
                    $("#state").removeAttr("disabled");
                    
                    getter(result.ID)
                    getstate(result.Organization_unit_codeID)
                    $("#s2id_getstate").removeAttr("disabled"); 

                },
                error: function () {

                    $("#countryname1").val(" ");
                }
            });
        }
        CountryName()
        function areaname(did) {


            $.ajax({
                type: "post",
                url: "/helper/getjoblevel",
                data: { "id": did },
                success: function (result) {

                    $("#ter").removeAttr("disabled");
                    $("#area").select2("val", result.ID);
                    $("#areaname1").val(result.Name);
                    //$("#area").attr("readonly", true);
                    //$("#area").prop("readonly", true);
                },
                error: function () {

                    $("#areaname1").val(" ");
                }
            });
        }
        function getter(did) {

            var oo = $("#employeeId").val();
            var id = $("#ter").val();

            $.ajax({
                type: "post",
                url: "/Helper/GetJobSolts",
                data: { "id": did,"did":oo },
                success: function (result) {

                    var finalresult="";
                    finalresult = "<option value='0' > Choose Slot desc </option>";
                    $.each(result, function (key, value) {
                        if (value.ID == parseInt(@Model.SlotdescId)) {
                            finalresult += "<option selected value='" + value.ID + "' >" + "[  " + value.Code + " ]</option>";
                        }
                        else {
                            finalresult += "<option value='" + value.ID + "' >" + "[  " + value.Code + " ]</option>";
                        }
                        //"--"+ value.slot_description +
                    });
                    $("#ter").html(finalresult);
                    //      $("#citeid").removeAttr("disabled");
                    //$("#ter").select2("val", result.ID);
                    slot();
                //    getallcite(result.ID);
                    $("#state").removeAttr("disabled");

                },
                error: function () {

                    $("#tername").val(" ");
                }
            });
        }
        function slot()
        {

            var id = $("#ter").val();
            $.ajax({
                type: "post",
                url: "/Helper/GetSolt",
                data: { "id": id },
                success: function (result) {

                    $("#tername").val(result.slot_code);
                },
                error: function () {

                    $("#tername").val(" ");
                }
            });
        }
        function getstate(did)
        {

            $.ajax({
                type: "post",
                url: "/Helper/GetOrganizationChart",
                data: { "id": did },
                success: function (result) {

                    $("#state").select2("val", result.ID);

                    $("#citeid").removeAttr("disabled");
                    $("#statename").val(result.unit_Description);
                    getcite(result.worklocationid)
                    getcite2(result.worklocationid)
                    //$("#state").attr("readonly", true);
                    //$("#state").prop("readonly", true);
                },
                error: function () {

                    $("#statename").val(" ");
                }
            });
        }

        function getcite(did) {

            $.ajax({
                type: "post",
                url: "/Helper/GetWorklocation",
                data: { "id": did },
                success: function (result) {


                    $("#citeid").select2("val", result.ID);
                    $("#cityname").val(result.Name);
                    $("#citeid").attr("readonly", true);
                    $("#citeid").prop("readonly", true);
                    $("#citeid2").removeAttr("disabled");
                },
                error: function () {

                    $("#cityname").val(" ");
                }
            });
        }

        function getcite2(did) {


            $.ajax({
                type: "post",
                url: "/Helper/GetWorklocation",
                data: { "id": did },
                success: function (result) {


                    $("#citeid2").select2("val", result.ID);
                    $("#cityname2").val(result.Name);

                },
                error: function () {

                    $("#cityname2").val(" ");
                }
            });
        }
            function Save(){
            var StartDate = new Date($(".StartDate").val());
            var EndDate = new Date($(".EndDate").val());

            var from = $(".StartDate").val();
            var to = $(".EndDate").val();

            if (to >  from) {
                GetDiffDates(from, to);
            }
            else {
                $("#Yearr").val("0");
                $("#months").val("0");
            }
    };
    function GetDiffDates(StartDate, EndDate) {
        if (StartDate && EndDate) {
            $.get("/Employee_military_service_calling/DifferenceTwoDates?StartDate=" + StartDate + '&EndDate=' + EndDate, function (data, status) {

                if (data) {
                    $("#Days").val(data.DateDiff.Days);
                    $("#months").val(data.DateDiff.Months);
                    $("#Yearr").val(data.DateDiff.Years);
                }
            });
        }
    }

            function Save2(){
            var StartDate = new Date($(".StartDate").val());
            var EndDate = new Date($(".EndDate").val());

            var from = $(".StartDate").val();
            var to = $(".EndDate").val();
            if (to > from) {
                GetDiffDates(from, to);
            }
            else {
                $("#Yearr").val("0");
                $("#months").val("0");
            }
        };
            function GetDataById5(date, id) {
                debugger
                var valx = new Date(date);
                var month;
                if ((valx.getMonth() + 1) < 10) {
                    month = "0" + (valx.getMonth() + 1).toString();
                }
                else {
                    month = date.getMonth() + 1;
                }
                var day = parseInt(valx.getDate());
                if (day < 10) {
                    day = "0" + (valx.getDate()).toString();
                }
                else {
                    day = valx.getDate();
                }
                var d = valx.getFullYear() + '-' + month + '-' + day;
                $('#' + id).val(d);
            }
</script>



