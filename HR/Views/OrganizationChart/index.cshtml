@{
    ViewBag.Title = "index";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}
@model IEnumerable<HR.Models.Organization_Chart>
@using System.Web.UI.WebControls
@using HR.Models;
  



<link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />

<div class="form-group">

    <link href="~/Content/print.css" rel="stylesheet" media="print" />

    <link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />
    <p>
        <input type="button" onclick="javascript:window.print()" class="NonPrintable btn btn-blue" style="color:white;background-color:forestgreen" value="Print All Tree" />
        <input type="button" style="margin-left:10px" onclick="location.href='@Url.Action("Create_node", "OrganizationChart")'" class="btn btn-success col-md-2" value="Create new node" />

     </p>
    <div class="form-body">
        <div id="jstree" style="margin-left:200px; text-align: left;direction:ltr" class="b">
            @(Html.TreeView(Model)
                          .EmptyContent("Root")
                          .Children(m => m.Childs)
                          .HtmlAttributes(new { id = "tree" })
                          .ChildrenHtmlAttributes(new { @class = "subItem" })
                          .ItemText(m => m.unit_Description)
                           .ItemTemplate(
            @<a href="@Url.Action("Details", "OrganizationChart",new{id=@item.ID})">
                @item.unit_Description
            </a>
        )

            )
        </div>
    </div>
</div>

 @section scripts{

    <script src="~/Scripts/jsTree3/jstree.min.js"></script>
    <script>
        debugger
        $("#jstree").jstree("open_all");
        $(function () {
            var selectedData;
            $('#jstree').jstree({
                "core": {
                    "multiple": true,
                    "check_callback": false,
                    'themes': {
                        "responsive": true,
                        'variant': 'larg',
                        'stripes': false,
                        'dots': false
                    }
                },
                "types": {
                    "default": {
                        "icon": "fa fa-folder icon-state-warning icon-lg"
                    },
                    "file": {
                        "icon": "fa fa-file icon-state-warning icon-lg"
                    }
                },
                "plugins": ["dnd", "state", "types", "sort", "checkbox"]
            });
        });
    </script>
}
 
@*<html>
<body>
    <a href="~/Content/TreeViewStyle.css.txt">~/Content/TreeViewStyle.css.txt</a>
    <div class="panel panel-primary" style="margin-top:45px; margin-right:-225px">
       
            <div class="panel-body  ">
              
                @* ده الجزء الى انا محتاجاه للشجره 
                <div style="height: 500px; overflow-y: scroll; overflow-x: hidden;" class="panpad">
                    <div class="treeview">
                        @if (Model != null && Model.Count() > 0)
                        {
                            <ul id="ul_parent">
                            @GetTreeView(Model,1);
                            </ul>
                        }
                    </div>
                </div>
            </div>
        
    </div>

    @* دول الاسكربتات بتاعت الشيك بوكس الى جنب الشجره الى بتخلينا لما نختار ال parent Node
        يعمل شيك على اولاده , ولما يختار الكل يعلم عليهم او يشيلهم 
    <script>
        function ckBoxClicked(chBox) {
            $(chBox).nextAll('ul').find('.chk').prop('checked', $(chBox).prop('checked'));
            if ($(chBox).prop('checked')) { // checked
                $(chBox).parentsUntil("#ul_parent").prevAll('.chk').prop('checked', $(chBox).prop('checked'));
            }
            else { // unchecked
                var li_ = $(chBox).parentsUntil("div.treeview").prevAll('ul');//.find('ul');//.nextAll('ul');
                //console.log('par: ', li_);
                console.log('par: ', li_.prevObject);
                $(li_.prevObject).each(function () {
                    var idAttr = $(this).attr('id');
                    if (idAttr == undefined) { // li
                        //console.log('checked prop: ', $(this).find('[type="checkbox"]').prop('checked'));
                        console.log($(this).nextAll('ul > .chk'));//.find('.chk').prop('checked'));

                        if ($(this).nextAll('ul').find('[type="checkbox"]').prop('checked'))
                        {
                            console.log($(this).nextAll('ul').find('.chk').prop('checked'));
                        }
                        //console.log('checked prop: ', $(this).find('[type="checkbox"]').prop('checked').length);
                        //console.log('checked: ', $(this).find('[type="checkbox"]').prop('checked').length);
                    }
                });
                //$(chBox).parentsUntil("#ul_parent").nextAll('.chk').prop('checked', $(chBox).prop('checked'));
            }
        }
    </script>
    @* Here We need some Jquery code for make this treeview collapsible 
    <script>
        var values = "";
        function loopLi(ul) {
            ul.children('li').each(function () {

                if ($(this).has('ul'))
                    loopLi($(this).children('ul'));

                $(this).children('input').each(function () {
                    if ($(this).prop('checked')) {
                        values += $(this).val() + ',';
                    }
                });
            });
        }
        function GetAreaOnly()
        {

            var ul = $('#ul_parent');
            var val = "";
            ul.each(function () {
                loopLi($(this));
            });
            const urlParams = new URLSearchParams(window.location.search);
            const groupCode = urlParams.get('group_code');
            $.get("/groups/Edit_group_permision", { permissionValue: values, group_code: groupCode }, function (data) {

                if (data == "True")
                    sAlert('تم تعديل الصلاحيات.', 0);
                else
                    sAlert('عفوا , هناك خطأ فى الصلاحيات.', 2);
            });
            values = "";
        }
    </script>
    <script>
        $(document).ready(function () {
            $(".treeview  li > ul").css('display', 'none'); // Hide all 2-level ul
            $(".collapsible").click(function (e) {
                e.preventDefault();
                $(this).toggleClass("collapseTree expandTree");
                $(this).closest('li').children(' ul').slideToggle();
            });
        });
        function all_check() {
            $('.chk').prop('checked', true);
        }
        function cancel_check() {
            $('.chk').prop('checked', false);
        }
    </script>
    <script>
        //if node checked its children also checked
        function chkFun(evt) {
            var src = window.event != window.undefined ? window.event.srcElement : evt.target;
            var isChkBoxClick = (src.tagName.toLowerCase() == "input" && src.type == "checkbox");
            var t = GetParentByTagName("table", src);
            if (isChkBoxClick) {
                var parentTable = GetParentByTagName("table", src);
                var nxtSibling = parentTable.nextSibling;
                if (nxtSibling && nxtSibling.nodeType == 1) {
                    if (nxtSibling.tagName.toLowerCase() == "div") {
                        CheckUncheckChildren(parentTable.nextSibling, src.checked);
                    }
                }
                CheckUncheckParents(src, src.checked);
            }
        }
        function CheckUncheckChildren(childContainer, check) {
            var childChkBoxes = childContainer.getElementsByTagName("input");
            var childChkBoxCount = childChkBoxes.length;
            for (var i = 0; i < childChkBoxCount; i++) {
                childChkBoxes[i].checked = check;
            }
        }
        function CheckUncheckParents(srcChild, check) {
            var parentDiv = GetParentByTagName("div", srcChild);
            var parentNodeTable = parentDiv.previousSibling;

            if (parentNodeTable) {
                var checkUncheckSwitch;
                var isAllSiblingsChecked = AreAllSiblingsChecked(srcChild);
                if (isAllSiblingsChecked) {
                    checkUncheckSwitch = true;
                }
                else {
                    checkUncheckSwitch = false;
                }
                var inpElemsInParentTable = parentNodeTable.getElementsByTagName("input");
                if (inpElemsInParentTable.length > 0) {
                    var parentNodeChkBox = inpElemsInParentTable[0];
                    parentNodeChkBox.checked = checkUncheckSwitch;

                    CheckUncheckParents(parentNodeChkBox, checkUncheckSwitch);
                }
            }
        }
        function AreAllSiblingsChecked(chkBox) {
            var parentDiv = GetParentByTagName("div", chkBox);
            var childCount = parentDiv.childNodes.length;
            var k = 0;
            for (var i = 0; i < childCount; i++) {
                if (parentDiv.childNodes[i].nodeType == 1) {
                    if (parentDiv.childNodes[i].tagName.toLowerCase() == "table") {
                        var prevChkBox = parentDiv.childNodes[i].getElementsByTagName("input")[0];
                        //if any of sibling nodes are not checked, return false
                        if (prevChkBox.checked) {
                            //add each selected node one value
                            k = k + 1;
                        }
                    }
                }
            }
            //Finally check any one of child node is select if selected yes then return ture parent node check
            if (k > 0) {
                return true;
            }
            else {
                return false;
            }
        }
        function GetParentByTagName(parentTagName, childElementObj) {
            var parent = childElementObj.parentNode;
            while (parent.tagName.toLowerCase() != parentTagName.toLowerCase()) {
                parent = parent.parentNode;
            }
            return parent;
        }
    </script>

    @Html.Raw(TempData["perm"])
</body>
</html>














@helper GetTreeView(List<HR.Models.Organization_Chart> f, int parentID)
{
foreach (var i in @f.Where(a => a.parent.Equals(parentID)))
{
    // دى كونديشن بحيث بقول ع كل ليفل هياخد لون
    <li>
        @{var child = @f.Where(a => a.parent.Equals(i)).Count();}
        @if (child > 0)
        {
            <span class="collapseTree collapsible">&nbsp;</span>
        }
        else
        {
            <span style="width:15px; display:inline-block">&nbsp;</span>
        }
        @if (i.groups_permissions.Where(x => x.function_code == i.function_code && x.group_code == int.Parse(Request.QueryString["group_code"])).Count() > 0)
        {
            <input type="checkbox" class='chk' onclick="ckBoxClicked(this);" value="@i.function_code" checked id="checks" /><h4 style="display:inline-block;margin-right:3px;color:@i.tree_colors.color_name" class='text-primary'> @i.function_name</h4>
        }
        else
        {
            <input type="checkbox" class='chk' onclick="ckBoxClicked(this);" value="@i.function_code" /><h4 style="display:inline-block;margin-right:3px;color:@i.tree_colors.color_name" class='text-primary'> @i.function_name</h4>
        }
        @if (child > 0)
        {
            <ul id="@i.function_name">
                @GetTreeView(f, i.function_code)
            </ul>
        }
    </li>


            }
}*@








