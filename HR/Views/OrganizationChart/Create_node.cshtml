@model HR.Models.Organization_Chart

@{
    ViewBag.Title = "Create_node";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}

@Scripts.Render("~/bundles/jqueryval")
<div class="content-wrapper">

    <section class="content-header">
        <h1>
            Create Organization chart
        </h1>
    </section>

    <!-- Main content -->
    <section class="content">

        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Create_node", "OrganizationChart", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">

                        <hr />

                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                      
                        <div class="form-group">
                            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Code, new { htmlAttributes = new {@readonly=true, @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.User_unit_code, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.User_unit_code, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.User_unit_code, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.unit_Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.unit_Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.unit_Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.alter_unit_Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.alter_unit_Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.alter_unit_Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                           
                            @Html.LabelFor(model => model.unit_type_codeID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.DropDownListFor(m => m.unit_type_codeID, new SelectList(ViewBag.unit_type, "ID", "Code"), "Select unit type code", new { @class = "select2", @onchange = "CountryName2()", @id = "Country2" })
                                @Html.ValidationMessageFor(model => model.unit_type_codeID, "", new { @class = "text-danger" })
                                <input type="text" value=" " class="form-control" id="countryname2" disabled />
                            </div>
                            @Html.LabelFor(model => model.parent, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.DropDownListFor(m => m.parent, new SelectList(ViewBag.parenttt, "ID", "Code"), "Select parent node", new { @class = "select2", @onchange = "CountryName1()", @id = "Country1" })
                                @Html.ValidationMessageFor(model => model.parent, "", new { @class = "text-danger" })
                                <input type="text" value=" " class="form-control" id="countryname1" disabled />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2"><spane> unit level code</spane></label>
                            <input class="form-control col-md-4" type="text" id="U_L_C" readonly />
                            <div class="col-md-2"></div>
                            <input class="form-control col-md-4" type="text" id="U_L_N" readonly />
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2"><spane> unit Schema code</spane></label>
                            <input class="form-control col-md-4" type="text" id="U_S_C" readonly />
                            <div class="col-md-2"></div>
                            <input class="form-control col-md-4" type="text" id="U_S_N" readonly />
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.worklocationid, htmlAttributes: new { @class = "control-label col-md-2" })


                            <div class="col-md-4">
                                @Html.DropDownListFor(m => m.worklocationid, new SelectList(ViewBag.location, "ID", "Code"), "Select Location work", new { @class = "select2", @onchange = "location87()", @id = "Lo" })
                                @Html.ValidationMessageFor(model => model.worklocationid, "", new { @class = "text-danger" })
                                <input type="text" value=" " class="form-control" id="Loname" disabled />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.unit_status, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EnumDropDownListFor(model => model.unit_status, new { @class = "select2" })
                                @Html.ValidationMessageFor(model => model.unit_status, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.number_of_direct_positions, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.number_of_direct_positions, new { htmlAttributes = new { type = "number",min="0", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.number_of_direct_positions, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.refrence_number, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.refrence_number, new { htmlAttributes = new {type="number", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.refrence_number, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.unit_mail, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.unit_mail, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.unit_mail, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @Html.HiddenFor(m=>m.master_node ,new { id = "mas" })

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" id="btnSave" class="btn btn-success" name="Command" value="Save">CREATE</button>
                                <a href="@Url.Action("index","OrganizationChart")" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>Back to index</a>
                            </div>
                        </div>
                    </div>
                }

            </div>

        </div>

    </section>
</div>
@section scripts{}
<script>
  $(function () {
      CKEDITOR.replace('Description');
  });
</script>
<script>
    debugger
    var v=$("#mas").val();
    if(v=="Y")
    {
       
        $("#Country1").prop('disabled', true);
    }
</script>
<script>
    function location87()
    {
        debugger
        var id= $("#Lo").val();
        $.ajax({
            type: "post",
            url: "/OrganizationChart/location",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#Loname").val(result.Name);
            }
        });
    }
    function CountryName2()
    {
        debugger
        var id= $("#Country2").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetOrganization_unit_type",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#countryname2").val(result.Name);
                $("#U_L_C").val(result.Organization_Unit_Level.Code);
                $("#U_L_N").val(result.Organization_Unit_Level.Name);
                $("#U_S_C").val(result.Organization_Unit_Schema.Code);
                $("#U_S_N").val(result.Organization_Unit_Schema.Name);
            },
            error: function () {
                debugger
                $("#countryname2").val(" ");
                $("#U_L_C").val("");
                $("#U_L_N").val("");
                $("#U_S_C").val("");
                $("#U_S_N").val("");
            }
        });
    }
    function CountryName1() {
        debugger
        var id = $("#Country1").val();
        $.ajax({
            type: "post",
            url: "/Helper/Get_organization_unit_chart",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#countryname1").val(result.unit_Description);
            },
            error: function () {
                debugger
                $("#countryname1").val(" ");
            }
        });
    }
    CountryName2()
    CountryName1();
    location87();
</script>