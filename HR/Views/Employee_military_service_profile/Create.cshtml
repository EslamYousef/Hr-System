@model HR.Models.Employee_military_service_profile

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}

@Scripts.Render("~/bundles/jqueryval")
<div class="content-wrapper">

    <section class="content-header">
        <h1>
            Create Employee Military Service Profile
        </h1>
    </section>

    <!-- Main content -->
    <section class="content">

        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Create", "Employee_military_service_profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        <hr />
                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.Employee_ProfileId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownListFor(m => m.Employee_ProfileId, new SelectList(ViewBag.Employee_Profile, "ID", "Code"), "Select Employee", new { @class = "select2", @onchange = "employee()", id = "employeeId" })
                                @Html.ValidationMessageFor(model => model.Employee_ProfileId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4" style="color:black">
                                <button type="submit" id="btnSubmit" name="Command" value="Submit" class="btn btn-success">Employee Profile</button>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", id = "codeid", @readonly = true } })
                                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Service_at_hire, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.CheckBoxFor(model => model.Service_at_hire, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Service_at_hire, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.Trio_number, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Trio_number, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Trio_number, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Branch, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Military_service_status, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EnumDropDownListFor(model => model.Military_service_status,  new { @class = "select2" } )
                                @Html.ValidationMessageFor(model => model.Military_service_status, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EnumDropDownListFor(model => model.Level, new { @class = "select2"  })
                                @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Military_Service_RankId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownListFor(m => m.Military_Service_RankId, new SelectList(ViewBag.Military_Service_Rank, "ID", "Code"), "Select Military Service Rank", new { @class = "select2", @onchange = "employee2()", id = "employeeId2" })
                                @Html.ValidationMessageFor(model => model.Military_Service_RankId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Certificate_date, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Certificate_date, new { htmlAttributes = new { @class = "form-control datepicker", @id = "dateto", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Certificate_date, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Batch_reference_No, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Batch_reference_No, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Batch_reference_No, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.From_date, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.From_date, new { htmlAttributes = new { @class = "form-control datepicker", @id = "dateto", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.From_date, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Id_number, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Id_number, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Id_number, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.To_date, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.To_date, new { htmlAttributes = new { @class = "form-control datepicker", @id = "dateto", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.To_date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rejection_ReasonsId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownListFor(m => m.Rejection_ReasonsId, new SelectList(ViewBag.Rejection_Reasons, "ID", "Code"), "Select Rejection Reasons", new { @class = "select2", @onchange = "employee3()", id = "employeeId3" })
                                @Html.ValidationMessageFor(model => model.Rejection_ReasonsId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Service_period_YY, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" OnClick="updatemaxplus(-1)">-</button>
                                    @Html.EditorFor(model => model.Service_period_YY, new { htmlAttributes = new { @min = 0, @class = "form-control size-1", id = "max", value = "1" } })
                                    <button type="button" class="btn btn-default" OnClick="updatemaxplus(1)">+</button>
                                </div>
                            </div>

                            @Html.LabelFor(model => model.Service_period_MM, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" OnClick="updatemaxplus2(-1)">-</button>
                                    @Html.EditorFor(model => model.Service_period_MM, new { htmlAttributes = new { @class = "form-control size-1", id = "max2", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" OnClick="updatemaxplus2(1)">+</button>
                                </div>
                            </div>
                        </div>
                  
                        <div class="form-group">
                            @Html.LabelFor(model => model.Service_period_The_number_of_days, htmlAttributes: new { @class = "control-label col-md-8" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" OnClick="updatemaxplus3(-1)">-</button>
                                    @Html.EditorFor(model => model.Service_period_The_number_of_days, new { htmlAttributes = new { @class = "form-control size-1", id = "max3", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" OnClick="updatemaxplus3(+1)">+</button>
                                </div>
                            </div>
                        </div>
                       

                        <div class="form-group">
                            @Html.LabelFor(model => model.Added_Service_period_YY, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" OnClick="updateminplus(-1)">-</button>
                                    @Html.EditorFor(model => model.Added_Service_period_YY, new { htmlAttributes = new { @class = "form-control size-1", id = "min2", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" OnClick="updateminplus(+1)">+</button>
                                </div>
                            </div>
                       
                            @Html.LabelFor(model => model.Added_Service_period_MM, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" OnClick="updateminplus2(-1)">-</button>
                                    @Html.EditorFor(model => model.Added_Service_period_MM, new { htmlAttributes = new { @class = "form-control size-1", id = "min22", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" OnClick="updateminplus2(+1)">+</button>
                                </div>
                            </div>
                        </div>
              

                        <div class="form-group">
                            @Html.LabelFor(model => model.Added_Service_period_The_number_of_days, htmlAttributes: new { @class = "control-label col-md-8" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" OnClick="updateminplus3(-1)">-</button>
                                    @Html.EditorFor(model => model.Added_Service_period_The_number_of_days, new { htmlAttributes = new { @class = "form-control size-1", id = "min222", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" OnClick="updateminplus3(+1)">+</button>
                                </div>
                            </div>
                        </div>
                 
                        <div class="form-group">
                            @Html.LabelFor(model => model.Total_Service_period_YY, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" disabled>-</button>
                                    @Html.EditorFor(model => model.Total_Service_period_YY, new { htmlAttributes = new { @readonly = true, @class = "form-control size-1", id = "mid", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" disabled>+</button>
                                </div>
                            </div>
                    
                            @Html.LabelFor(model => model.Total_Service_period_MM, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" disabled>-</button>
                                    @Html.EditorFor(model => model.Total_Service_period_MM, new { htmlAttributes = new { @readonly = true, @class = "form-control size-1", id = "mid2", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" disabled>+</button>
                                </div>
                            </div>
                        </div>
                          
                        <div class="form-group">
                            @Html.LabelFor(model => model.Total_Service_period_The_number_of_days, htmlAttributes: new { @class = "control-label col-md-8" })
                            <div class="col-md-4">
                                <!-- Spinner Markup -->
                                <div class="input-spinner">
                                    <button type="button" class="btn btn-default" disabled>-</button>
                                    @Html.EditorFor(model => model.Total_Service_period_The_number_of_days, new { htmlAttributes = new { @readonly = true, @class = "form-control size-1", id = "mid3", value = "1", @min = 0 } })
                                    <button type="button" class="btn btn-default" disabled>+</button>
                                </div>
                            </div>
                        </div>
                       
                            <div class="form-group">
                                @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.TextAreaFor(model => model.Comments, 4, 55, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                                </div>
                            </div>



                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Create" class="btn btn-success" />
                                    <a href="@Url.Action("index","Employee_military_service_profile")" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>Back</a>

                                </div>
                            </div>
                        </div>
                }

            </div>

        </div>

    </section>
</div>
@section scripts{}


<script>
    $(document).ready(function () {
        $("#employeeId").attr("disabled", true);
      
    });
</script>
<script>
    function employee() {
        debugger
        var id = $("#employeeId").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetEmployee",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#employeename").val(result.Name);
                $("#codeid").val(result.Employee_Address_Profile.Code);
            },
            error: function () {
                debugger
                $("#employeename").val(" ");
                $("#codeid").val("");
            }
        });
    }
    function employee2() {
        debugger
        var id = $("#employeeId2").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetMilitaryServiceRank",
            data: { "id": id },
            success: function (result) {
                debugger
             
            },
            error: function () {
                debugger
              
            }
        });
    }

    function employee3() {
        debugger
        var id = $("#employeeId3").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetRejectionReasons",
            data: { "id": id },
            success: function (result) {
                debugger

            },
            error: function () {
                debugger

            }
        });
    }

    $("#min2").keyup(function (e) {
        debugger
        var min2 = parseInt($("#min2").val());
        var min22 = parseInt($("#min22").val());
        var min222 = parseInt($("#min222").val());
        var max = parseInt($("#max").val());
        var max2 = parseInt($("#max2").val());
        var max3 = parseInt($("#max3").val());
        var mid = (min2  + max );
   //     var mid2 = (min22 + max2);
    //    var mid3 = (min222 + max3);
        $("#mid").val(mid);
      //  $("#mid2").val(mid2);
   //     $("#mid3").val(mid3);

    });
    $("#max").keyup(function (e) {
        var min2 = parseInt($("#min2").val());
        var min22 = parseInt($("#min22").val());
        var min222 = parseInt($("#min222").val());
        var max = parseInt($("#max").val());
        var max2 = parseInt($("#max2").val());
        var max3 = parseInt($("#max3").val());
        var mid = (min2 + max);
        var mid2 = (min22 + max2);
        var mid3 = (min222 + max3);
        $("#mid").val(mid);
   //     $("#mid2").val(mid2);
   //     $("#mid3").val(mid3);

    });
    function updateminplus(value)
    {
        debugger
      //  var min = parseInt($("#min").val()) + parseInt(value);
        var min2 = parseInt($("#min2").val()) +parseInt(value);
        var min22 = parseInt($("#min22").val()) +parseInt(value);
        var min222 = parseInt($("#min222").val())+parseInt(value);
        var max = parseInt($("#max").val());
        var max2 = parseInt($("#max2").val());
        var max3 = parseInt($("#max3").val());
        var mid = (min2 + max);
        var mid2 = (min22 + max2);
        var mid3 = (min222 + max3);
        $("#mid").val(mid);
     //   $("#mid2").val(mid2);
      //  $("#mid3").val(mid3);
    }
    function updatemaxplus(value) {
        debugger
     //   var min = parseInt($("#min").val()) ;
        var min2 = parseInt($("#min2").val());
        var min22 = parseInt($("#min22").val());
        var min222 = parseInt($("#min222").val());
        var max = parseInt($("#max").val()) + parseInt(value);
        var max2 = parseInt($("#max2").val()) + parseInt(value);
        var max3 = parseInt($("#max3").val()) + parseInt(value);
        var mid = (min2 + max);
        var mid2 = (min22 + max2);
        var mid3 = (min222 + max3);
        $("#mid").val(mid);

    }

    $("#min22").keyup(function (e) {
        debugger 
        var min22 = parseInt($("#min22").val());      
        var max2 = parseInt($("#max2").val());        
    var mid2 = (min22 + max2);    
      $("#mid2").val(mid2);  
    });
    $("#max2").keyup(function (e) {     
        var min22 = parseInt($("#min22").val());       
        var max2 = parseInt($("#max2").val());             
        var mid2 = (min22 + max2);            
    $("#mid2").val(mid2); 
    });
    function updateminplus2(value)
    {
        debugger
        var min22 = parseInt($("#min22").val()) +parseInt(value);
        var max2 = parseInt($("#max2").val());
        var mid2 = (min22 + max2);
     $("#mid2").val(mid2);
    }
    function updatemaxplus2(value) {
        debugger
        var min22 = parseInt($("#min22").val());
        var max2 = parseInt($("#max2").val()) + parseInt(value);
        var mid2 = (min22 + max2);
      $("#mid2").val(mid2);
    }

    $("#min222").keyup(function (e) {
        debugger
        var min222 = parseInt($("#min222").val());
        var max22 = parseInt($("#max3").val());
    var mid2 = (min222 + max22);
      $("#mid2").val(mid2);
    });
    $("#max22").keyup(function (e) {
        var min222 = parseInt($("#min222").val());
        var max22 = parseInt($("#max3").val());
        var mid222 = (min222 + max22);
    $("#mid3").val(mid222);
    });
    function updateminplus3(value)
    {
        debugger
        var min222 = parseInt($("#min222").val()) +parseInt(value);
        var max22 = parseInt($("#max3").val());
        var mid3 = (min222 + max22);
     $("#mid3").val(mid3);
    }
    function updatemaxplus3(value) {
        debugger
        var min222 = parseInt($("#min222").val());
        var max3 = parseInt($("#max3").val()) + parseInt(value);
        var mid3 = (min222 + max3);
      $("#mid3").val(mid3);
    }
</script>
