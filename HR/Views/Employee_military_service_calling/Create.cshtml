@model HR.Models.Employee_military_service_calling
@using HR.Resource;
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}

@Scripts.Render("~/bundles/jqueryval")



<div class="content-wrapper">

    <section class="content-header">
        <h1>
            @Personnel.CreateEmployeeMilitaryServiceCalling
        </h1>
    </section>

    <!-- Main content -->
    <section class="content">
        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Create", "Employee_military_service_calling", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">

                        <hr />

                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        @Html.HiddenFor(m => m.Employee_Profile.ID);
                        <div>

                            <div class="form-group">
                                <label class="control-label col-md-2">@Personnel.EmployeeName</label>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(m => m.Employee_ProfileId, new SelectList(ViewBag.Employee_Profile, "ID", "Code"), "Select Employee", new { @class = "select2", @onchange = "employee()", id = "employeeId8" })
                                    @Html.ValidationMessageFor(model => model.Employee_ProfileId, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-4" style="color:black">
                                    <button type="submit" id="btnSubmit" name="Command" value="Submit" class="btn btn-success">@Personnel.EmployeeProfile</button>
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2">@Personnel.MilitaryservicecallingNo</label>
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                            </div>


                                

                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Startdate</label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Start_date, new { htmlAttributes = new { @class = "form-control @*datepicker*@ StartDate yy dt", @id = "Start_date", @onchange = "Save()", @autocomplete = "off", @type = "date" } })
                                            @Html.ValidationMessageFor(model => model.Start_date, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="control-label col-md-2">@Personnel.Years</label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Years, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "Yearr", @type = "number", @min = 0 } })

                                            @Html.ValidationMessageFor(model => model.Years, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                           
                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Enddate</label>
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.End_date, new { htmlAttributes = new { @class = "form-control @*datepicker*@ EndDate yyy dt ", @id = "End_date", @onchange = "Save2()", @autocomplete = "off", @type = "date" } })
                                            @Html.ValidationMessageFor(model => model.End_date, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="control-label col-md-1">@Personnel.Months</label>
                                        <div class="col-md-2">
                                            @Html.EditorFor(model => model.Months, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "months", @type = "number", @min = 0 } })

                                            @Html.ValidationMessageFor(model => model.Months, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="control-label col-md-1">@Personnel.Days</label>
                                        <div class="col-md-2">
                                            @Html.EditorFor(model => model.Days, new { htmlAttributes = new {@readonly="true", @class = "form-control" ,id = "Days"} })
                                            @Html.ValidationMessageFor(model => model.Days, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="control-label col-md-2">@Personnel.Comments</label>
                                        <div class="col-md-3">
                                            @Html.TextAreaFor(model => model.Comments,4,55, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                            @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                               
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <a href="@Url.Action("index","Employee_military_service_calling",new {id=ViewBag.idemp})" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>@Personnel.Back</a>
                                            <input type="submit" value="@Personnel.Create" class="btn btn-success" />
                                           
                                        </div>
                                    </div>
                                </div>

                }

            </div>

        </div>

    </section>
</div>

@section scripts{}


<script>
    $(document).ready(function () {

        $("#employeeId8").attr("disabled", true);
        GetDataById5('@Model.Start_date', "Start_date");
        GetDataById5('@Model.End_date', "End_date");
        Save();
        Save2();
    });
</script>

<script>
    function employee() {
         
        var id = $("#employeeId8").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetEmployee",
            data: { "id": id },
            success: function (result) {
                 
                $("#employeename").val(result.Name);
                $("#codeid").val(result.Employee_Positions_Profile.Code);
                //$("#employeeId").attr("readonly", true);
                //$("#employeeId").prop("readonly", true);
            },
            error: function () {
                 
                $("#employeename").val(" ");
                $("#codeid").val("");
            }
        });
    }
   
    function Save() {
         
            var StartDate = new Date($(".StartDate").val());
            var EndDate = new Date($(".EndDate").val());

            var from = $(".StartDate").val();
            var to = $(".EndDate").val();

            if (to >  from) {
                var diffTime = Math.abs(EndDate - StartDate);
                var Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
                var months = Math.floor(Days / 31);
                var years = Math.floor(months / 12);
                $("#Yearr").val(years);
                $("#months").val(months-(years * 12));
                $("#Days").val(Days - (months * 31)-(years*12));
            }
            else {
                $("#Yearr").val("0");
                $("#months").val("0");
                $("#Days").val("0");
            }
        };

    function Save2() {
         
            var StartDate = new Date($(".StartDate").val());
            var EndDate = new Date($(".EndDate").val());

            var from = $(".StartDate").val();
            var to = $(".EndDate").val();
            if (to > from) {
                var diffTime = Math.abs(EndDate - StartDate);
                var Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
                var months = Math.floor(Days / 31);
                var years = Math.floor(months / 12);
                $("#Yearr").val(years);
                $("#months").val(months - (years * 12));
                $("#Days").val(Days - (months * 31) - (years * 12));
            }
            else {
                $("#Yearr").val("0");
                $("#months").val("0");
           $("#Days").val("0");
            }
        };
    function GetDataById5(date, id) {
        debugger
        var valx = new Date(date);
        var month;
        if ((valx.getMonth() + 1) < 10) {
            month = "0" + (valx.getMonth() + 1).toString();
        }
        else {
            month = date.getMonth() + 1;
        }
        var day = parseInt(valx.getDate());
        if (day < 10) {
            day = "0" + (valx.getDate()).toString();
        }
        else {
            day = valx.getDate();
        }
        var d = valx.getFullYear() + '-' + month + '-' + day;
        $('#' + id).val(d);
    }
</script>





