@model HR.Models.Employee_military_service_calling

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}

@Scripts.Render("~/bundles/jqueryval")



<div class="content-wrapper">

    <section class="content-header">
        <h1>
            Create Employee Military Service Profile
        </h1>
    </section>

    <!-- Main content -->
    <section class="content">
        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Create", "Employee_military_service_calling", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">

                        <hr />

                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                        <div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Employee_ProfileId, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.DropDownListFor(m => m.Employee_ProfileId, new SelectList(ViewBag.Employee_Profile, "ID", "Code"), "Select Employee", new { @readonly = true, @class = "select2", @onchange = "employee()", id = "employeeId" })
                                    @Html.ValidationMessageFor(model => model.Employee_ProfileId, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-4" style="color:black">
                                    <button type="submit" id="btnSubmit" name="Command" value="Submit" class="btn btn-success">Employee Profile</button>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                            </div>


                                

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Start_date, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Start_date, new { htmlAttributes = new { @class = "form-control datepicker StartDate yy dt", @id = "dateto", @onclick = "Save()" } })
                                            @Html.ValidationMessageFor(model => model.Start_date, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.Years, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.Years, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "Yearr", @type = "number", @min = 0 } })

                                            @Html.ValidationMessageFor(model => model.Years, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                           
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.End_date, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-4">
                                            @Html.EditorFor(model => model.End_date, new { htmlAttributes = new { @class = "form-control datepicker EndDate yyy dt ", @id = "dateto", @onclick ="Save2()" } })
                                            @Html.ValidationMessageFor(model => model.End_date, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.Months, htmlAttributes: new { @class = "control-label col-md-1" })
                                        <div class="col-md-2">
                                            @Html.EditorFor(model => model.Months, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "months", @type = "number", @min = 0 } })

                                            @Html.ValidationMessageFor(model => model.Months, "", new { @class = "text-danger" })
                                        </div>
                                        @Html.LabelFor(model => model.Days, htmlAttributes: new { @class = "control-label col-md-1" })
                                        <div class="col-md-2">
                                            @Html.EditorFor(model => model.Days, new { htmlAttributes = new {@readonly="true", @class = "form-control" ,id = "Days"} })
                                            @Html.ValidationMessageFor(model => model.Days, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-3">
                                            @Html.TextAreaFor(model => model.Comments,4,60, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                               
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Create" class="btn btn-success" />
                                            <a href="@Url.Action("index","Employee_contract_profile",new {id=ViewBag.id})" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>Back</a>
                                        </div>
                                    </div>
                                </div>

                }

            </div>

        </div>

    </section>
</div>

@section scripts{}
<script>
  $(function () {
      CKEDITOR.replace('Description');
  });
</script>


<script>
    $(document).ready(function () {

        Save();
        Save2();
    });
</script>

<script>
    function employee() {
        debugger
        var id = $("#employeeId").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetEmployee",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#employeename").val(result.Name);
                $("#codeid").val(result.Employee_Positions_Profile.Code);
                $("#employeeId").attr("readonly", true);
                $("#employeeId").prop("readonly", true);
            },
            error: function () {
                debugger
                $("#employeename").val(" ");
                $("#codeid").val("");
            }
        });
    }
    employee();
</script>




<script>
   
        debugger
        function Save() {
            debugger
            $(".yy").on('click', function () {
                //// var x = $(".name").val();

                var StartDate = new Date($(".StartDate").val());
                var EndDate = new Date($(".EndDate").val());

                var from = $(".StartDate").val();
                var to = $(".EndDate").val();

                if (to > from) {
                    var diffTime = Math.abs(EndDate - StartDate);
                    var Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
                    var months = Math.floor(Days / 31);
                    var years = Math.floor(months / 12);
                    $("#Yearr").val(years);
                    $("#months").val(months);
                    $("#Days").val(Days);

                }
                else {
                    $("#Yearr").val("0");
                    $("#months").val("0");
                    $("#Days").val("0");

                }

            });
        }
 
</script>

<script>
    
        debugger
        function Save2() {

            debugger
            $(".yyy").on('click', function () {
                //// var x = $(".name").val();

                var StartDate = new Date($(".StartDate").val());
                var EndDate = new Date($(".EndDate").val());

                var from = $(".StartDate").val();
                var to = $(".EndDate").val();
                if (to > from) {
                    var diffTime = Math.abs(EndDate - StartDate);
                    var Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
                    var months = Math.floor(Days / 31);
                    var years = Math.floor(months / 12);
                    $("#Yearr").val(years);
                    $("#months").val(months);
                    $("#Days").val(Days);

            
                }
                else {
                    $("#Yearr").val("0");
                    $("#months").val("0");
                    $("#Days").val("0");
                }
            
            });
        }

</script>
@*<script>
    $(document.ready)
$(".dt").datepicker({
    onSelect: function (dateText, inst) {
        debugger
        //var date = $(this).val();
        //var time = $('#time').val();
        //alert('on select triggered');
        //$("#start").val(date + time.toString(' HH:mm').toString());
        var StartDate = new Date($(".StartDate").val());
        var EndDate = new Date($(".EndDate").val());

        var from = $(".StartDate").val();
        var to = $(".EndDate").val();
        if (to > from) {
            var diffTime = Math.abs(EndDate - StartDate);
            var Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
            var months = Math.floor(Days / 31);
            var years = Math.floor(months / 12);
            $("#Yearr").val(years);
            $("#months").val(months);
            $("#Days").val(Days);


        }
        else {
            $("#Yearr").val("0");
            $("#months").val("0");
            $("#Days").val("0");
        }
    }
});
</script>*@







