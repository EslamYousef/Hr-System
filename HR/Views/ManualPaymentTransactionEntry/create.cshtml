@model HR.Controllers.TransactionsPayroll.HeaderManual
<script>
    $(document).ready(function () {
        debugger
        GetDataById5('@Model.ManualPaymentTransactionEntry.TransactionDate', "Start");
        GetDataById5('@Model.ManualPaymentTransactionEntry.EffectiveDate', "End");
        GetDataById5('@Model.ManualPaymentTransactionEntry.FromDate', "From");
        GetDataById5('@Model.ManualPaymentTransactionEntry.ToDate', "To");
        GetDataById5('@Model.ManualPaymentTransactionEntry.PaidDate', "Paid");
        //$("#checksta").attr("disabled", true);
        //$("#s2id_checksta").attr("disabled", true);
        //$("#select2-chosen-3").attr("disabled", true);
    });
    function GetDataById5(date, id) {
        debugger
        var valx = new Date(date);
        var month;
        if ((valx.getMonth() + 1) < 10) {
            month = "0" + (valx.getMonth() + 1).toString();
        }
        else {
            month = date.getMonth() + 1;
        }
        var day = parseInt(valx.getDate());
        if (day < 10) {
            day = "0" + (valx.getDate()).toString();
        }
        else {
            day = valx.getDate();
        }
        var d = valx.getFullYear() + '-' + month + '-' + day;
        $('#' + id).val(d);
    }

</script>

<script>
    function CountryName() {
        var id = $("#Country").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetEmployees",
            data: { "id": id },
            success: function (result) {

                //$("#countryname").val(result.AccountName);
            },
            error: function () {
                $("#countryname").val(" ");
            }
        });
    }
    CountryName();

    function CountryNamess() {
        var id = $("#Countryss").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetDebit",
            data: { "id": id },
            success: function (result) {

                //$("#countryname").val(result.AccountName);
            },
            error: function () {
                $("#countrynamess").val(" ");
            }
        });
    }
    CountryNamess();

    function Type_Code() {
        debugger
        $("#cars").empty();
        var id = $("#Type").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetManualPaymentTypes_Header",
            data: { "id": id },
            success: function (result) {
                debugger
                //$("#Extended").val(result.Name);
                ExtendedFields(id)
            },
            error: function () {

            }
        });
    }
    Type_Code();

    function ExtendedFields(id) {
        debugger
        $.ajax({
            type: "post",
            url: "/Helper/GetExtendedFieldsHeaderByManualPaymentTypes",
            data: { "id": id },
            success: function (result) {
                debugger
                $("#Extended").val(result.ExtendedFields_Code + " ----- " + result.ExtendedFields_Desc);
                AllExtendedFields(result.ID)
            },
            error: function () {
                //$("#Extended").val(" ");
            }
        });
    }
    function AllExtendedFields(id) {
        debugger

        $.ajax({
            type: "post",
            url: "/Helper/GetExtendedFieldsDetailsByExtendedFieldsHeader",
            data: { "id": id },
            success: function (result) {
                debugger
                $.each(result, function (i, r) {
                    if (r.ValueType == 1) {
                        var ValueType = "Amount";
                    }
                    else if (r.ValueType == 2) {
                        var ValueType = "Percent";
                    }
                    else if (r.ValueType == 3) {
                        var ValueType = "Hours";
                    }
                    else if (r.ValueType == 4) {
                        var ValueType = "Days";
                    }
                    else if (r.ValueType == 5) {
                        var ValueType = "Months";
                    }
                    else if (r.ValueType == 6) {
                        var ValueType = "Years";
                    }
                    var tt = '<tr><td><input readonly class= "form-control" value = ' + r.Detail_Code + ' name="codeid"></td><td><input readonly class= "form-control" value = ' + r.Detail_Desc + ' name="SalaryDes"></td><td><input readonly class= "form-control" value = ' + ValueType + ' name="ValueType"></td><td><input readonly class= "form-control" value = ' + r.Value + ' name="DefaultValue"></td></tr>'
                    $("#cars").append(tt)
                    //$("#s2id_Type").attr("disabled", true);
                    //$("#select2-chosen-2").attr("disabled", true);
                    //$("#Type").attr("disabled", true);
                })
            },
            error: function () {
                //$("#Extended").val(" ");
            }
        });
    }

</script>
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
    //  Layout = "~/Views/Shared/View.cshtml";
}
@using HR.Resource;
<div class="panel panel-primary" data-collapsed="0">
    <div class="panel-body">
        @using (Html.BeginForm("Create", "ManualPaymentTransactionEntry", FormMethod.Post, new { id = "dd", enctype = "multipart/form-data" }))
        {
        <div class="sec-nav">
            <div><i class="far fa-save"></i><button type="submit" class="create-btn" />@organ.create</div>
            <div><i class="fas fa-plus"></i><a href="@Url.Action("create", "ManualPaymentTransactionEntry")" class="create-btn">@pers_2.new_</a></div>
            <div>
                <i class="far fa-trash-alt"></i><input type="button" href="@Url.Action("index","ManualPaymentTransactionEntry")" class="create-btn" value=@organ.delete style="
    background-color: transparent" ; />
            </div>
            <div><i class="fas fa-undo"></i><a style="" href="@Url.Action("index", "ManualPaymentTransactionEntry")" class="create-btn"> @pers_2.Back</a></div>
        
            <div><i class="far fa-save"></i> <button type="submit" id="btnSubmit" name="Command" value="Submit" class="create-btn" />@Payroll.Viewdetail</div>
        </div>
            <hr /><hr /><hr />
            <section class="content-header">
                <h1>
                    @Payroll.CreatePaymentSettlementTransactionEntry
                </h1>
            </section>
            @Html.AntiForgeryToken()
            @*<input name="ID_item" value="" hidden />*@
            <input name="codeid" value="" hidden />
            <input name="SalaryDes" value="" hidden />
            <input name="TypeE" value="" hidden />
            <input name="ValueType" value="" hidden />
            <input name="DefaultValue" value="" hidden />

            <div class="form-horizontal">
                <hr />
                @if (TempData["Message"] != null)
                {
                    <div class="alert alert-danger alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @TempData["Message"]
                    </div>
                }
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">

                    <div class="col-md-4">
                        <label style="color:red">
                            @Payroll.Transactionnumber
                        </label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.TransactionNumber, new { htmlAttributes = new { @readonly = true, @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.TransactionNumber, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label style="color:red">@Payroll.Employeeid</label>
                        @Html.DropDownListFor(m => m.ManualPaymentTransactionEntry.Employee_Code, new SelectList(ViewBag.Employee_Profile, "ID", "Code"), Personnel.SelectEmployee, new { @class = "select2", @onchange = "CountryName()", id = "Country" })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.Employee_Code, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label style="color:red">@Payroll.Manualpaymenttype</label>
                        @Html.DropDownListFor(m => m.ManualPaymentTransactionEntry.ManualPaymentType, new SelectList(ViewBag.ManualPaymentTypes_Header, "ID", "Code"), Payroll.SelectManualpaymenttype, new { @class = "select2", @onchange = "Type_Code()", id = "Type" })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.ManualPaymentType, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label style="color:red">@Payroll.Transactiondate</label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.TransactionDate, new { htmlAttributes = new { @class = "form-control  StartDate yy", @id = "Start", @type = "date", @onchange = "Saves2()" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.TransactionDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label style="color:red">@Payroll.Effectivedate</label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.EffectiveDate, new { htmlAttributes = new { @class = "form-control  EndDate yyy", @id = "End", @type = "date", @onchange = "Saves()" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.EffectiveDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-4">
                        <label>@Payroll.Currentyear</label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.CurrentYear, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 1, id = "name1", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.CurrentYear, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label>@Payroll.Previousyear</label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.PreviousYear, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 1, id = "name2", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.PreviousYear, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label>@Personnel.Fromdate</label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.FromDate, new { htmlAttributes = new { @class = "form-control  StartDate yy", @id = "From", @type = "date" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.FromDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label>@Personnel.Todate</label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.ToDate, new { htmlAttributes = new { @class = "form-control  EndDate yyy", @id = "To", @type = "date" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.ToDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label> @Payroll.TransactionStatus</label>
                        @Html.EditorFor(m => m.check_status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", id = "checksta", @display = "display" } })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-4">
                        <label>@Payroll.Extendedfieldscode </label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.ExtendedFields_Code, new { htmlAttributes = new { @class = "form-control", id = "Extended", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.ExtendedFields_Code, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <table id="categories" class="table table-bordered table-striped text-center">
                        <thead>
                            <tr>
                                <td hidden></td>
                                <td class="col-md-1">
                                    @Payroll.Code
                                </td>
                                <td class="col-md-1">
                                    @Payroll.Description
                                </td>
                                <td class="col-md-1">
                                    @Payroll.ValueType
                                </td>
                                <td class="col-md-1">
                                    @Payroll.Value
                                </td>
                            </tr>
                        </thead>
                        <tbody id="cars">
                        </tbody>
                    </table>
                </div>
                <div class="col-md-12">
                    <ul class="nav nav-tabs bordered">
                        <!-- available classes "bordered", "right-aligned" -->
                        <li class="active">
                            <a href="#Budgetdetails" data-toggle="tab">
                                <span class="visible-xs"><i class="entypo-home"></i></span>
                                <span class="hidden-xs">@Payroll.Paid</span>
                            </a>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="Budgetdetails" style="overflow: hidden;width: auto;height: auto;">

                            <div class="form-group">
                                <div class="col-md-4">
                                    <label>@Payroll.Paiddate</label>
                                    @Html.EditorFor(model => model.ManualPaymentTransactionEntry.PaidDate, new { htmlAttributes = new { @class = "form-control  EndDate yyy", @id = "Paid", @type = "date" } })
                                    @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.PaidDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label> @Payroll.Paidreferencenumber </label>
                                    @Html.EditorFor(model => model.ManualPaymentTransactionEntry.PaidReferenceNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.PaidReferenceNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <ul class="nav nav-tabs bordered">
                        <!-- available classes "bordered", "right-aligned" -->
                        <li class="active">
                            <a href="#Budgetdetails" data-toggle="tab">
                                <span class="visible-xs"><i class="entypo-home"></i></span>
                                <span class="hidden-xs">@Payroll.SourceDocument</span>
                            </a>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="Budgetdetails" style="overflow: hidden;width: auto;height: auto;">

                            <div class="form-group">
                                <div class="col-md-4">
                                    <label> <span>@Payroll.Documenttype</span>  </label>
                                    @Html.EditorFor(m => m.Payment_Type_Source_Document, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @display = "display" } })
                                </div>
                                <div class="col-md-4">
                                    <label> @Payroll.Referencenumber </label>
                                    @Html.EditorFor(model => model.ManualPaymentTransactionEntry.ReferenceNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.ReferenceNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label> @Payroll.Referencedescription </label>
                                    @Html.EditorFor(model => model.ManualPaymentTransactionEntry.ReferenceDescription, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.ReferenceDescription, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label> @Payroll.Referencenote </label>
                                    @Html.EditorFor(model => model.ManualPaymentTransactionEntry.ReferenceNote, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.ReferenceNote, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-4">
                        <label>@Payroll.Transactionnote</label>
                        @Html.EditorFor(model => model.ManualPaymentTransactionEntry.TransactionNote, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ManualPaymentTransactionEntry.TransactionNote, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        }
    </div>
</div>
@section scripts{}
<script>
    $(function () {
        debugger
        GetDataById4('@Model.ManualPaymentTransactionEntry.EffectiveDate', "End");

          function Saves() {
                  debugger
                  var FullName = $("#End").val().split('-');
                  if (FullName.length > 0) {
                      $("#name1").val(FullName[0]);
                      $("#name2").val(FullName[0]-1);
                  }
              }
        Saves();

          });
        function GetDataById4(date, id) {
            debugger
            var valx = new Date(date);
            var month;
            if ((valx.getMonth() + 1) < 10) {
                month = "0" + (valx.getMonth() + 1).toString();
            }
            else {
                month = date.getMonth() + 1;
            }
            var day = parseInt(valx.getDate());
            if (day < 10) {
                day = "0" + (valx.getDate()).toString();
            }
            else {
                day = valx.getDate();
            }
            var d = valx.getFullYear() + '-' + month + '-' + day;
            $('#' + id).val(d);
        }
    function Saves() {
        debugger
        var FullName = $("#End").val().split('-');
        if (FullName.length > 0) {
            $("#name1").val(FullName[0]);
            $("#name2").val(FullName[0]-1);
        }
    }

</script>
<style>

    /*Create Page*/


    .sec-nav {
        z-index: 9999;
        position: fixed;
        top: 47px;
        background: #faf9f8;
        border-bottom: 1px solid #bebbb8;
        display: block;
        width: 100%;
        left: 50px;
        padding-left: 10px;
        height: 60px;
        line-height: 60px;
    }

        .sec-nav div {
            display: inline-block;
            padding: 5px 8px;
            width: unset;
            border: 0;
            color: #000;
            font-size: 16px;
            height: 60px;
        }

            .sec-nav div:hover {
                background: #eee;
                color: #000;
            }

                .sec-nav div:hover input {
                    color: #000;
                }

    .create-btn {
        border: 0;
        height: 100%;
        background-color: transparent;
    }

    .sec-nav div svg {
        color: #2266e3;
        font-size: 17px;
    }

    .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {
        /*float: unset*/
    }

    label {
        text-align: left;
        font: normal normal 400 12px/18px 'Segoe UI',tahoma,sans-serif;
        color: #605e5c;
        display: block;
        margin-bottom: 0;
        max-width: 220px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight: 600;
        margin-top: 15px;
    }

    .form-horizontal .form-group {
        margin: 0 !important;
    }

    input {
        height: 35px;
        color: #000;
    }

        input:active {
            border: 1px solid #2266e3;
        }

    .form-group .row > div {
        margin-bottom: 10px;
    }

    .content-wrapper {
        margin-left: 15px;
    }

    .col-md-4 {
        width: 20% !important;
        margin-bottom: 15px;
    }

    .col-md-3 {
        width: 20% !important;
        margin-bottom: 15px;
    }
</style>
