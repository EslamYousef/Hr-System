@model HR.Models.Employee_experience_profile
@using HR.Resource;
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}

@Scripts.Render("~/bundles/jqueryval")
<div class="content-wrapper">

    <section class="content-header">
        <h1>
            @Personnel.CreateEmployeeExperienceProfile
        </h1>
    </section>

    <!-- Main content -->
    <section class="content">

        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Create", "Employee_experience_profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Employee_ProfileId);
                    <div class="form-horizontal">
                        <hr />
                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                     
          <div class="form-group">
              <label class="control-label col-md-2">@Personnel.EmployeeName</label>
                            <div class="col-md-3">
                                @Html.DropDownListFor(m => m.Employee_ProfileId, new SelectList(ViewBag.Employee_Profile, "ID", "Code"), "Select Employee", new { @class = "select2", @onchange = "employee()", id = "employeeId" })
                                @*@Html.ValidationMessageFor(model => model.Employee_ProfileId, "", new { @class = "text-danger" })*@
                        

                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.ExperienceprofileNo</label>
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", id = "codeid", @readonly = true } })
                                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4" style="color:black">
                                <button type="submit" id="btnSubmit" name="Command" value="Submit" class="btn btn-success">@Personnel.EmployeeProfile</button>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Companycode</label>
                            <div class="col-md-3">
                                @Html.DropDownListFor(m => m.External_compainesId, new SelectList(ViewBag.External_compaines, "ID", "Code"), Personnel.SelectCompany, new { @class = "select2", @onchange = "company()", id = "companyId" })
                                @Html.ValidationMessageFor(model => model.External_compainesId, "", new { @class = "text-danger" })
                                
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Companytype</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Company_type, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Company_type, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Jobtitle</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Job_title, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Job_title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Startdate</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Start_date, new { htmlAttributes = new { @class = "form-control StartDate", @id = "Start", @onchange = "Save()", @autocomplete = "off", @type = "date" } })
                                @Html.ValidationMessageFor(model => model.Start_date, "", new { @class = "text-danger" })
                            </div>

                            <label class="control-label col-md-2">@Personnel.Years</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Years, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "Yearr", @type = "number", @min = 0 } })

                                @Html.ValidationMessageFor(model => model.Years, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Enddate</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.End_date, new { htmlAttributes = new { @class = "form-control EndDate", @id = "End", @onchange = "Save2()", @autocomplete = "off", @type = "date" } })
                                @Html.ValidationMessageFor(model => model.End_date, "", new { @class = "text-danger" })
                            </div>
                            <label class="control-label col-md-1">@Personnel.Months</label>
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.Months, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "months", @type = "number", @min = 0 } })

                                @Html.ValidationMessageFor(model => model.Months, "", new { @class = "text-danger" })
                            </div>
                            <label class="control-label col-md-1">@Personnel.Days</label>
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.Days, new { htmlAttributes = new { @readonly = "true", @class = "form-control", id = "Days" } })
                                @Html.ValidationMessageFor(model => model.Days, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Totalsalary</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Total_salary, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 0 } })
                                @Html.ValidationMessageFor(model => model.Total_salary, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Reasonofleave</label>
                            <div class="col-md-3">
                                @Html.DropDownListFor(m => m.Rejection_ReasonsId, new SelectList(ViewBag.Rejection_Reasons, "ID", "Code"),Personnel.SelectReasonofleave, new { @class = "select2", @onchange = "Reasons()", id = "ReasonsId" })
                                @Html.ValidationMessageFor(model => model.Rejection_ReasonsId, "", new { @class = "text-danger" })
                               

                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Addedyears</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Added_years, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 0 } })

                                @Html.ValidationMessageFor(model => model.Added_years, "", new { @class = "text-danger" })
                            </div>
                            <label class="control-label col-md-2">@Personnel.Approveddate</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Approval_date, new { htmlAttributes = new { @class = "form-control datepicker", @id = "dateto", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Approval_date, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Addedmonths</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Added_months, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 0 } })

                                @Html.ValidationMessageFor(model => model.Added_months, "", new { @class = "text-danger" })
                            </div>
                            <label class="control-label col-md-2">@Personnel.Consideredperiod</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Considered_period, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 0 } })
                                @Html.ValidationMessageFor(model => model.Considered_period, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">@Personnel.Addeddays</label>
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Added_days, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 0 } })

                                @Html.ValidationMessageFor(model => model.Added_days, "", new { @class = "text-danger" })
                            </div>
                        </div>



                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="@Personnel.Create" class="btn btn-success" />
                                    <a href="@Url.Action("index","Employee_experience_profile",new {id=ViewBag.idemp})" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i>@Personnel.Back</a>

                                </div>
                            </div>
                        </div>
                }

            </div>

        </div>

    </section>
</div>
@section scripts{}
<script>
    $(document).ready(function () {
        $("#employeeId").attr("disabled", true);
        GetDataById2();
        GetDataById5('@Model.Approval_date', "Approval_date ");
    });
</script>
<script>
    function employee() {
         
        var id = $("#employeeId").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetEmployee",
            data: { "id": id },
            success: function (result) {
                 
                $("#employeename").val(result.Name);
                $("#codeid").val(result.Employee_experience_profile.Code);
                $("#employeeId").prop("readonly", true);
                $("#employeeId").attr("readonly", true);

            },
            error: function () {
                 
                $("#employeename").val(" ");
                $("#codeid").val("");
            }
        });
    }

    function company() {
         
        var id = $("#companyId").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetExternalcompaines",
            data: { "id": id },
            success: function (result) {
                 
                $("#Companyname").val(result.Name);

            },
            error: function () {
                 
                $("#Companyname").val(" ");

            }
        });
    }
    function Reasons() {
         
        var id = $("#ReasonsId").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetRejectionReasons",
            data: { "id": id },
            success: function (result) {
                 
                $("#Reasonsname").val(result.Name);

            },
            error: function () {
                 
                $("#Reasonsname").val(" ");

            }
        });
    }
    function GetDataById() {

        let x = window.location.href.split('/')[5];
        $.ajax({
            type: "post",
            url: "/Helper/GetDataByIdExperience",
            data: { "id": x },
            success: function (result) {

                if (result) {
                    var date = parseJsonDate(result.End_date)
                    month = date.getMonth() + 1;
                    if (parseInt(month) < 10) {
                        month = '0' + month;
                    }
                    day = date.getDate();
                    if (parseInt(day) < 10) {
                        day = '0' + day;
                    }


                    //     month = date.getMonth() + 1;
                    var d = date.getFullYear() + '-' + month + '-' + day;
                    $("#End").val(d);
                    Save();
                    Save2();
                    console.log(result);
                }
            },
            error: function () {


            }
        });
    }
    //   GetDataById();
    function parseJsonDate(jsonDateString) {
        return new Date(parseInt(jsonDateString.replace('/Date(', '')));
    }
    ///////////////////////////////////
    function GetDataById2() {
        debugger
        let x = window.location.href.split('/')[5];
        $.ajax({
            type: "post",
            url: "/Helper/GetDataByIdExperience",
            data: { "id": x },
            success: function (result) {
                debugger
                if (result) {
                    var date = parseJsonDate(result.Start_date)
                    month = date.getMonth() + 1;
                    if (parseInt(month) < 10) {
                        month = '0' + month;
                    }
                    day = date.getDate();
                    if (parseInt(day) < 10) {
                        day = '0' + day;
                    }


                    //      month = date.getMonth() + 1;
                    var d = date.getFullYear() + '-' + month + '-' + day;
                    $("#Start").val(d);
                    GetDataById();
                    console.log(result);
                }
            },
            error: function () {


            }
        });
    }
    //  GetDataById2();
    function parseJsonDate(jsonDateString) {
        return new Date(parseInt(jsonDateString.replace('/Date(', '')));
    }
    function Save() {
        debugger


        var StartDate = new Date($(".StartDate").val());
        var EndDate = new Date($(".EndDate").val());

        //   var from = $(".StartDate").val();
        //   var to = $(".EndDate").val();
        var from = StartDate.getDate() + '-' + (StartDate.getMonth() + 1) + '-' + StartDate.getFullYear();
        var to = EndDate.getDate() + '-' + (EndDate.getMonth() + 1) + '-' + EndDate.getFullYear();
        //if (to > from) {
        var diffTime = Math.abs(EndDate - StartDate);
        var Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
        var years = Math.floor(Days / 365);
        var months = Math.floor((Days / (31)) - (years * 12));
        var cday = (years * 365) + (months * 31);
        var lastday = Days - cday;
        var newmonth = parseInt((lastday / 30));
        $("#Days").val((lastday) - (newmonth * 30));
        $("#months").val(months + newmonth);
        $("#Yearr").val(years);
        //}
        //else {
        //    $("#Yearr").val("0");
        //    $("#months").val("0");
        //    $("#Days").val("0");
        //}
    };
    function Save2() {
        debugger
        var StartDate = new Date($(".StartDate").val());
        var EndDate = new Date($(".EndDate").val());
        //   var x = $(".StartDate").val().split('/');
        //    var StartDate = new Date(x[2],x[1]-1,x[0]);
        //    var EndDate = new Date($(".EndDate").val());
        var from = StartDate.getDate() + '-' + (StartDate.getMonth() + 1) + '-' + StartDate.getFullYear();
        var to = EndDate.getDate() + '-' + (EndDate.getMonth() + 1) + '-' + EndDate.getFullYear();
        //   var from = $(".StartDate").val();
        //     var to = $(".EndDate").val();
        //if (to > from) {
        var diffTime = Math.abs(EndDate - StartDate);
        var Days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;

        var years = Math.floor(Days / 365);
        var months = Math.floor((Days / (31)) - (years * 12));
        var cday = (years * 365) + (months * 31);
        var lastday = Days - cday;
        var newmonth = parseInt((lastday / 30));
        $("#Days").val((lastday) - (newmonth * 30));
        $("#months").val(months + newmonth);
        $("#Yearr").val(years);



        //}
        //else {
        //    $("#Yearr").val("0");
        //    $("#months").val("0");
        //    $("#Days").val("0");
        //}
    };
    function GetDataById5(date, id) {
        debugger
        var valx = new Date(date);
        var month;
        if ((valx.getMonth() + 1) < 10) {
            month = "0" + (valx.getMonth() + 1).toString();
        }
        else {
            month = date.getMonth() + 1;
        }
        var day = parseInt(valx.getDate());
        if (day < 10) {
            day = "0" + (valx.getDate()).toString();
        }
        else {
            day = valx.getDate();
        }
        var d = valx.getFullYear() + '-' + month + '-' + day;
        $('#' + id).val(d);
    }

</script>
