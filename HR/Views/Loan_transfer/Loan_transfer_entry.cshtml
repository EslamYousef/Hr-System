@model HR.Controllers.payroll_tran1.transferVM

@using HR.Resource
@{
    ViewBag.Title = "create";
    Layout = "~/Views/Shared/MainLayOut.cshtml";
}
<div class="content-wrapper">



    <!-- Main content -->
    <section class="content">
        <div class="box">

            <!-- /.box-header -->
            <div class="box-body">

                @using (Html.BeginForm("Loan_transfer_entry", "Loan_transfer", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <div class="sec-nav">
                        <div><i class="far fa-save"></i><button type="submit" class="create-btn">@organ.Save </button></div>
                        <div><i class="fas fa-undo"></i><a style="" href="@Url.Action("index", "LoanRequest")" class="create-btn"> @pers_2.new_</a></div>

                        <div><i class="fas fa-undo"></i><a style="" href="@Url.Action("index", "LoanRequest")" class="create-btn"> @pers_2.Back</a></div>

                    </div>
                 
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">

                        <hr />

                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @TempData["Message"]
                            </div>
                        }
                        @Html.HiddenFor(m => m.LoanRequest.ID);
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <section style="margin-top: 40px" class="content-header">
                            <h1>
                                @pers_2.transfer
                            </h1>
                        </section>
                        <section style="margin-top: 40px" class="content-header">
                            <h1>
                                @pers_2.Oldrequest
                            </h1>
                        </section>
                        <div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @Personnel.requestnumber
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.TransferTransactionNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.TransferTransactionNumber, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @Personnel.requestnumber
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.LoanRequestNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.LoanRequestNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @pers_2.employee
                                    </label>
                                    @Html.DropDownListFor(m => m.LoanRequest.EmployeeID, new SelectList(ViewBag.emp, "ID", "Code"), pers_2.employee, new { @readonly = true, @class = "select2", @onchange = "employee()", id = "employeeId" })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.EmployeeID, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @Personnel.loantype
                                    </label>
                                    @Html.DropDownListFor(m => m.LoanRequest.LoanTypeCode, new SelectList(ViewBag.loan_type, "ID", "Code"), Personnel.loantype, new { @readonly = true, @class = "select2", @onchange = "employee3()", id = "employeeId3" })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.LoanTypeCode, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @Personnel.loanamount
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.LoanAmount, new { htmlAttributes = new { @readonly = true ,@class = "form-control", @type = "number", id = "loanamount" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.LoanAmount, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.numberofinstallment
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.NumberOfInstallment, new { htmlAttributes = new { @readonly = true, @class = "form-control", @type = "number", id = "numberofinstall" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.NumberOfInstallment, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.loaninstallmentamount
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.LoanInstallmentAmount, new { htmlAttributes = new { @readonly = true, @class = "form-control", @type = "number", id = "loaninstallamount" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.LoanInstallmentAmount, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.numberofdeduction
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.NumberOfDeductedInstallments, new { htmlAttributes = new { @readonly = true, @max = Model.LoanRequest.NumberOfInstallment, @class = "form-control", id = "Deducttion", @type = "number" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.NumberOfDeductedInstallments, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.totalpaidamount
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.TotalPaidAmount, new { htmlAttributes = new { @readonly = true, @class = "form-control", @type = "number" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.TotalPaidAmount, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-md-4">
                                    <label>
                                        @Personnel.totalremainingamount
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.TotalRemainingAmount, new { htmlAttributes = new { @readonly = true, @class = "form-control", @type = "number", id = "remain" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.TotalRemainingAmount, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.Startdate
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.StartDate, new { htmlAttributes = new { @readonly = true, @class = "form-control StartDate yy", @type = "date", @id = "Contract_start_date_s", @onchange = "Save()" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.StartDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.Enddate
                                    </label>
                                    @Html.EditorFor(model => model.LoanRequest.EndDate, new { htmlAttributes = new { @class = "form-control StartDate yy", @type = "date", @id = "Contract_end_date_D", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.EndDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-9">
                                    <label>
                                        @pers_2.notes
                                    </label>
                                    @Html.TextAreaFor(model => model.LoanRequest.LoanRequestNote, 4, 67, new { htmlAttributes = new { @readonly = true, @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LoanRequest.LoanRequestNote, "", new { @class = "text-danger" })
                                </div>
                            </div>

                       


                        </div>
                        <section style="margin-top: 40px" class="content-header">
                            <h1>
                              @pers_2.newrequest
                            </h1>
                        </section>
                        <div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @Personnel.requestnumber
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.NewLoanRequestNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.NewLoanRequestNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @pers_2.employee
                                    </label>
                                    @Html.DropDownListFor(m => m.LoanTransfer.ToEmplpyee_Code, new SelectList(ViewBag.emp, "ID", "Code"), pers_2.employee, new { @readonly = true, @class = "select2", @onchange = "employee()", id = "employeeId" })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.ToEmplpyee_Code, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @Personnel.loantype
                                    </label>
                                    @Html.DropDownListFor(m => m.LoanTransfer.LoanTypeCode, new SelectList(ViewBag.loan_type, "ID", "Code"), Personnel.loantype, new { @readonly = true, @class = "select2", @onchange = "employee3()", id = "employeeId3" })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.LoanTypeCode, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-4">
                                    <label style="color:red">
                                        @Personnel.loanamount
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.LoanAmount, new { htmlAttributes = new { @readonly = true, @class = "form-control", @type = "number", id = "loanamount" } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.LoanAmount, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.numberofinstallment
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.NumberOfInstallment, new { htmlAttributes = new { @readonly = true, @class = "form-control", @type = "number", id = "numberofinstall" } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.NumberOfInstallment, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.loaninstallmentamount
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.LoanInstallmentAmount, new { htmlAttributes = new { @readonly = true, @class = "form-control", @type = "number", id = "loaninstallamount" } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.LoanInstallmentAmount, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.numberofdeduction
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.NumberOfDeductedInstallments, new { htmlAttributes = new { @readonly = true, @max = Model.LoanRequest.NumberOfInstallment, @class = "form-control", id = "Deducttion", @type = "number" } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.NumberOfDeductedInstallments, "", new { @class = "text-danger" })
                                </div>
                               

                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.Startdate
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.StartDate, new { htmlAttributes = new { @readonly = true, @class = "form-control StartDate yy", @type = "date", @id = "Contract_start_date_s2", @onchange = "Save()" } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.StartDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    <label>
                                        @Personnel.Enddate
                                    </label>
                                    @Html.EditorFor(model => model.LoanTransfer.EndDate, new { htmlAttributes = new { @class = "form-control StartDate yy", @type = "date", @id = "Contract_end_date_D2", @readonly = true } })
                                    @Html.ValidationMessageFor(model => model.LoanTransfer.EndDate, "", new { @class = "text-danger" })
                                </div>
                               
                            </div>

                        </div>


                    </div>

                }

            </div>

        </div>

    </section>
</div>

@section scripts{}



<style>
    /*Create Page*/

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield;
    }

    .sec-nav {
        z-index: 9999;
        position: fixed;
        top: 47px;
        background: #faf9f8;
        border-bottom: 1px solid #bebbb8;
        display: block;
        width: 100%;
        left: 50px;
        padding-left: 10px;
        height: 60px;
        line-height: 60px;
    }

        .sec-nav div {
            display: inline-block;
            padding: 5px 8px;
            width: unset;
            border: 0;
            color: #000;
            font-size: 16px;
            height: 60px;
        }

            .sec-nav div:hover {
                background: #eee;
                color: #000;
            }

                .sec-nav div:hover input {
                    color: #000;
                }

    .create-btn {
        border: 0;
        height: 100%;
        background-color: transparent;
    }

    .sec-nav div svg {
        color: #2266e3;
        font-size: 17px;
    }

    .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {
        /*float: unset*/
    }

    label {
        text-align: left;
        font: normal normal 400 12px/18px 'Segoe UI',tahoma,sans-serif;
        color: #605e5c;
        display: block;
        margin-bottom: 0;
        max-width: 220px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight: 600;
        margin-top: 15px;
    }

    .form-horizontal .form-group {
        margin: 0 !important;
    }

    input {
        height: 35px;
        color: #000;
    }

        input:active {
            border: 1px solid #2266e3;
        }

    .form-group .row > div {
        margin-bottom: 10px;
    }

    .content-wrapper {
        margin-left: 15px;
    }

    .col-md-4 {
        width: 20% !important;
    }
</style>

<script>
    $(document).ready(function () {
        GetDataById2('@Model.LoanRequest.StartDate', "Contract_start_date_s");
        GetDataById2('@Model.LoanRequest.EndDate', "Contract_end_date_D");
        GetDataById2('@Model.LoanTransfer.StartDate', "Contract_start_date_s2");
        GetDataById2('@Model.LoanTransfer.EndDate', "Contract_end_date_D2");
    });
    $("#loanamount").keyup(function (e) {
        var value1 = $("#loanamount").val();
        $("#remain").val(parseFloat(value1));
        var value2 = $("#numberofinstall").val();
        $("#loaninstallamount").val(parseFloat(parseFloat(value1) / parseFloat(value2)));
    });
    $("#numberofinstall").keyup(function (e) {
        var value1 = $("#loanamount").val();
        var value2 = $("#numberofinstall").val();
        $("#loaninstallamount").val(parseFloat(parseFloat(value1) / parseFloat(value2)));
        debugger

        /////
        document.getElementById("Deducttion").max =parseInt(value2);
        update_end_date();
    });
    $("#Deducttion").keyup(function (e) {

        /////
        update_end_date();
    });
    function update_end_date()
    {
        var value1 = $("#Deducttion").val();
        if (parseInt($("#Deducttion").val()) == 0) { valu1 = 1; }
        var value2 = $("#numberofinstall").val();
        if (parseInt($("#numberofinstall").val()) == 0) { valu2 = 1; }
        if (parseInt($("#Deducttion").val()) > parseInt($("#numberofinstall").val()))
        {
            debugger
            alert("deduction greater than number of installment ");
            $("#Deducttion").val(1);
        }
        else
        {
            var start_Date = $("#Contract_start_date_s").val().toString();
            var valx = new Date(start_Date);
            var month;
            debugger
            var year = valx.getFullYear();
            var di = parseInt(parseInt(value2) / parseInt(value1));
            if (parseInt(value2) % parseInt(value1) > 0) {
                di = di + 1;
            }
            month = parseInt(valx.getMonth() + 1) + (di-1);
            if ((month) < 10) {
                month = "0" + (month).toString();
            }
            else {
                if (month > 12) {
                    year = year + parseInt(parseInt(month) / 12);
                    month = "0" + (month - (parseInt(parseInt(month) / 12) * 12)).toString();
                }
                else {

                    month = month;
                }
            }
            var day = parseInt(valx.getDate());
            if (day < 10) {
                day = "0" + (valx.getDate()).toString();
            }
            else {
                day = valx.getDate();
            }
            var d = year + '-' + month + '-' + day;
            $("#Contract_end_date_D").val(d);
        }

    }
    function GetDiffDates(StartDate, EndDate) {
        if (StartDate && EndDate) {
            $.get("/Employee_military_service_calling/DifferenceTwoDates?StartDate=" + StartDate + '&EndDate=' + EndDate, function (data, status) {

                if (data) {
                    debugger
                    // $("#Days").val(data.DateDiff.Days);
                    $("#months").val(data.DateDiff.Months);
                    $("#Yearr").val(data.DateDiff.Years);
                }
            });
        }
    }
    function GetDataById2(date, id) {
        debugger
        var valx = new Date(date);
        var month;
        if ((valx.getMonth() + 1) < 10) {
            month = "0" + (valx.getMonth() + 1).toString();
        }
        else {
            month = valx.getMonth() + 1;
        }
        var day = parseInt(valx.getDate());
        if (day < 10) {
            day = "0" + (valx.getDate()).toString();
        }
        else {
            day = valx.getDate();
        }
        var d = valx.getFullYear() + '-' + month + '-' + day;
        $('#' + id).val(d);
    }

    function employee() {

        var id = $("#employeeId").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetEmployee",
            data: { "id": id },
            success: function (result) {

                $("#employeename").val(result.Name);
                $("#codeid").val(result.Employee_Positions_Profile.Code);
                $("#employeeId").attr("readonly", true);
                $("#employeeId").prop("readonly", true);
            },
            error: function () {

                $("#employeename").val(" ");
                $("#codeid").val("");
            }
        });
    }
    function employee2() {

        var id = $("#employeeId2").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetEmployee",
            data: { "id": id },
            success: function (result) {

                //  $("#employeename").val(result.Name);

            },
            error: function () {

                //    $("#employeename").val(" ");
            }
        });
    }
    function employee3() {

        var id = $("#employeeId3").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetContract_Type",
            data: { "id": id },
            success: function (result) {

                //  $("#employeename").val(result.Name);

            },
            error: function () {

                //    $("#employeename").val(" ");
            }
        });
    }
    function employee4() {

        var id = $("#employeeId4").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetAirports",
            data: { "id": id },
            success: function (result) {

                //  $("#employeename").val(result.Name);

            },
            error: function () {

                //    $("#employeename").val(" ");
            }
        });
    }
    function employee5() {

        var id = $("#employeeId5").val();
        $.ajax({
            type: "post",
            url: "/Helper/GetAirports",
            data: { "id": id },
            success: function (result) {

                //  $("#employeename").val(result.Name);

            },
            error: function () {

                //    $("#employeename").val(" ");
            }
        });
    }
    function Save() {
        update_end_date();
    }

</script>