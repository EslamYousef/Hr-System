<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewAllergyTypes" xml:space="preserve">
    <value>Add New Allergy Types</value>
  </data>
  <data name="AddNewMedicalContributionAllocationsEntry" xml:space="preserve">
    <value>Add New Medical Contribution Allocations Entry</value>
  </data>
  <data name="AddNewMedicalDisease" xml:space="preserve">
    <value>Add New Medical Disease</value>
  </data>
  <data name="AddNewMedicalDoctor" xml:space="preserve">
    <value>Add New Medical Doctor</value>
  </data>
  <data name="AddNewMedicalDoctorLevel" xml:space="preserve">
    <value>Add New Medical Doctor Level</value>
  </data>
  <data name="AddNewMedicalmedicineclassification" xml:space="preserve">
    <value>Add New Medical medicine classification</value>
  </data>
  <data name="AddNewMedicine" xml:space="preserve">
    <value>Add New Medicine</value>
  </data>
  <data name="AddNewSingsSymptom" xml:space="preserve">
    <value>Add New Sings Symptom</value>
  </data>
  <data name="AllergyCode" xml:space="preserve">
    <value>Allergy Code</value>
  </data>
  <data name="AllergyName" xml:space="preserve">
    <value>Allergy Name</value>
  </data>
  <data name="AllergyTName" xml:space="preserve">
    <value>Allergy TName</value>
  </data>
  <data name="AllergyTypes" xml:space="preserve">
    <value>Allergy Types</value>
  </data>
  <data name="AlloConCode" xml:space="preserve">
    <value>Allo./Con. Code</value>
  </data>
  <data name="AllowedTo" xml:space="preserve">
    <value>Allowed To</value>
  </data>
  <data name="Beneficiaries" xml:space="preserve">
    <value>Beneficiaries</value>
  </data>
  <data name="ClassCode" xml:space="preserve">
    <value>Class Code</value>
  </data>
  <data name="ClassificationCode" xml:space="preserve">
    <value>Classification Code</value>
  </data>
  <data name="ConAlloc.Code" xml:space="preserve">
    <value>Con. /Alloc .Code</value>
  </data>
  <data name="ConAlloc.TypeCode" xml:space="preserve">
    <value>Con./Alloc. Type Code</value>
  </data>
  <data name="Contraindication" xml:space="preserve">
    <value>Contraindication</value>
  </data>
  <data name="CoverFor" xml:space="preserve">
    <value>Cover For</value>
  </data>
  <data name="CreateAllergyTypes" xml:space="preserve">
    <value>Create Allergy Types</value>
  </data>
  <data name="CreateMedicalContributionAllocationsEntry" xml:space="preserve">
    <value>Create Medical Contribution Allocations Entry</value>
  </data>
  <data name="CreateMedicalDisease" xml:space="preserve">
    <value>Create Medical Disease</value>
  </data>
  <data name="CreateMedicalDoctor" xml:space="preserve">
    <value>Create Medical Doctor</value>
  </data>
  <data name="CreateMedicalDoctorLevel" xml:space="preserve">
    <value>Create Medical Doctor Level</value>
  </data>
  <data name="CreateMedicalmedicineclassification" xml:space="preserve">
    <value>Create Medical medicine classification</value>
  </data>
  <data name="CreateMedicine" xml:space="preserve">
    <value>Create Medicine</value>
  </data>
  <data name="CreateSingsSymptom" xml:space="preserve">
    <value>Create Sings Symptom</value>
  </data>
  <data name="DiseaseCode" xml:space="preserve">
    <value>Disease Code</value>
  </data>
  <data name="DiseaseName" xml:space="preserve">
    <value>Disease Name</value>
  </data>
  <data name="DiseaseTName" xml:space="preserve">
    <value>Disease TName</value>
  </data>
  <data name="DoctorName" xml:space="preserve">
    <value>Doctor Name</value>
  </data>
  <data name="DoctorTName" xml:space="preserve">
    <value>Doctor TName</value>
  </data>
  <data name="EditAllergyTypes" xml:space="preserve">
    <value>Edit Allergy Types</value>
  </data>
  <data name="EditMedicalContributionAllocationsEntry" xml:space="preserve">
    <value>Edit Medical Contribution Allocations Entry</value>
  </data>
  <data name="EditMedicalDisease" xml:space="preserve">
    <value>Edit Medical Disease</value>
  </data>
  <data name="EditMedicalDoctor" xml:space="preserve">
    <value>Edit Medical Doctor</value>
  </data>
  <data name="EditMedicalDoctorLevel" xml:space="preserve">
    <value>Edit Medical Doctor Level</value>
  </data>
  <data name="EditMedicalmedicineclassification" xml:space="preserve">
    <value>Edit Medical medicine classification</value>
  </data>
  <data name="EditMedicine" xml:space="preserve">
    <value>Edit Medicine</value>
  </data>
  <data name="EditSingsSymptom" xml:space="preserve">
    <value>Edit Sings Symptom</value>
  </data>
  <data name="EmpCode" xml:space="preserve">
    <value>Emp Code</value>
  </data>
  <data name="Indication" xml:space="preserve">
    <value>Indication</value>
  </data>
  <data name="IsContribution" xml:space="preserve">
    <value>Is Contribution</value>
  </data>
  <data name="IsForeign" xml:space="preserve">
    <value>Is Foreign</value>
  </data>
  <data name="LevelCode" xml:space="preserve">
    <value>Level Code</value>
  </data>
  <data name="LevelName" xml:space="preserve">
    <value>Level Name</value>
  </data>
  <data name="MedicalContributionAllocationsEntry" xml:space="preserve">
    <value>Medical Contribution Allocations Entry</value>
  </data>
  <data name="MedicalDisease" xml:space="preserve">
    <value>Medical Disease</value>
  </data>
  <data name="MedicalDoctor" xml:space="preserve">
    <value>Medical Doctor</value>
  </data>
  <data name="MedicalDoctorLevel" xml:space="preserve">
    <value>Medical Doctor Level</value>
  </data>
  <data name="Medicalmedicineclassification" xml:space="preserve">
    <value>Medical medicine classification</value>
  </data>
  <data name="Medicine" xml:space="preserve">
    <value>Medicine</value>
  </data>
  <data name="MedicineCode" xml:space="preserve">
    <value>Medicine Code</value>
  </data>
  <data name="MedicineName" xml:space="preserve">
    <value>Medicine Name</value>
  </data>
  <data name="MedicineTName" xml:space="preserve">
    <value>Medicine TName</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="PrecaultionWarnings" xml:space="preserve">
    <value>Precaultion Warnings</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="ServiceCode" xml:space="preserve">
    <value>Service Code</value>
  </data>
  <data name="Services" xml:space="preserve">
    <value>Services</value>
  </data>
  <data name="SingCode" xml:space="preserve">
    <value>Sing Code</value>
  </data>
  <data name="SingName" xml:space="preserve">
    <value>Sing Name</value>
  </data>
  <data name="SingsSymptom" xml:space="preserve">
    <value>Sings Symptom</value>
  </data>
  <data name="TName" xml:space="preserve">
    <value>TName</value>
  </data>
  <data name="UsualDosage" xml:space="preserve">
    <value>Usual Dosage</value>
  </data>
</root>